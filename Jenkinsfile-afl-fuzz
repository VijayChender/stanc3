/* Functions that runs a sh command and returns the stdout */
def runShell(String command){
    def output = sh (returnStdout: true, script: "${command}").trim()
    return "${output}"
}

/* Checks out a branch from a repository */
def checkoutRepository(repositoryBranch, repositoryUrl = "https://github.com/stan-dev/stanc3"){
    checkout([$class: 'GitSCM',
        branches: [[name: "*/${repositoryBranch}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[
            $class: 'SubmoduleOption',
            disableSubmodules: false,
            parentCredentials: false,
            recursiveSubmodules: true,
            reference: '',
            trackingSubmodules: false
        ]],
        submoduleCfg: [],
        userRemoteConfigs: [[
            credentialsId: 'a630aebc-6861-4e69-b497-fd7f496ec46b', 
            url: repositoryUrl
        ]]
    ])
}

pipeline {
    agent none
    parameters {
        string(defaultValue: 'master', name: 'branch', description: "Git branch")
        string(defaultValue: '60', name: 'run_time', description: "afl-fuzz runtime")
        string(defaultValue: '30000', name: 'allocated_mb_afl', description: "Allocated MB for afl-fuzz '-m' argument.")
    }
    environment {
        BUILD_AGENT = "linux-ec2"
    }
    stages {
        stage("Build stanc3 and run afl-fuzz") {
            agent {
                dockerfile {
                    label env.BUILD_AGENT
                    filename 'docker/afl-fuzz/Dockerfile'
                    args "-u root --entrypoint=\'\'"
                }
            }
            steps {
                script {
                    env.BUILD_AGENT = env.NODE_NAME
                    checkoutRepository(params.branch)
                }

                runShell("mkdir -p afl-out")
                runShell("mkdir -p afl-in")

                runShell("cp ./test/integration/good/code-gen/*.stan ./afl-in")

                runShell("""
                    eval \$(opam env)
                    dune build src/stanc/stanc.exe
                """)

                script {
                    try {
                        runShell("timeout ${params.run_time}s afl-fuzz -m ${params.allocated_mb_afl} -i ./afl-in -o ./afl-out _build/default/src/stanc/stanc.exe @@")
                    }
                    catch (err) {
                        emailExtraMsg = "Build Failure: "+ err.getMessage()
                        echo emailExtraMsg
                    }
                }

                runShell("tar -czvf afl-out.tar.gz afl-out/*")
                archiveArtifacts artifacts: '*.tar.gz' 
            }
        }
        stage("Clean workdir") {
            agent { label "${env.BUILD_AGENT}" }
            steps {
                runShell("sudo rm -rf ${env.WORKSPACE}/*")
            }
        }
    }
}