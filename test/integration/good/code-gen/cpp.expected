  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>

template <typename T, typename S>
std::vector<T> resize_to_match(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}

namespace eight_schools_ncp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'eight_schools_ncp.stan', line 8, column 2 to column 10)",
                                                      " (in 'eight_schools_ncp.stan', line 9, column 2 to column 20)",
                                                      " (in 'eight_schools_ncp.stan', line 10, column 2 to column 22)",
                                                      " (in 'eight_schools_ncp.stan', line 14, column 2 to column 16)",
                                                      " (in 'eight_schools_ncp.stan', line 16, column 4 to column 41)",
                                                      " (in 'eight_schools_ncp.stan', line 15, column 2 to line 16, column 41)",
                                                      " (in 'eight_schools_ncp.stan', line 20, column 2 to column 20)",
                                                      " (in 'eight_schools_ncp.stan', line 21, column 2 to column 21)",
                                                      " (in 'eight_schools_ncp.stan', line 22, column 2 to column 29)",
                                                      " (in 'eight_schools_ncp.stan', line 23, column 2 to column 27)",
                                                      " (in 'eight_schools_ncp.stan', line 2, column 2 to column 17)",
                                                      " (in 'eight_schools_ncp.stan', line 3, column 2 to column 12)",
                                                      " (in 'eight_schools_ncp.stan', line 4, column 2 to column 25)"};


class eight_schools_ncp_model : public model_base_crtp<eight_schools_ncp_model> {

 private:
  int pos__;
  int J;
  std::vector<double> y;
  std::vector<double> sigma;
 
 public:
  ~eight_schools_ncp_model() { }
  
  std::string model_name() const { return "eight_schools_ncp_model"; }
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      
      current_statement__ = 12;
      pos__ = 1;
      current_statement__ = 12;
      J = context__.vals_i("J")[(pos__ - 1)];
      y = std::vector<double>(J, 0);
      
      current_statement__ = 13;
      pos__ = 1;
      current_statement__ = 13;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 13;
        y[(sym1__ - 1)] = context__.vals_r("y")[(pos__ - 1)];
        current_statement__ = 13;
        pos__ = (pos__ + 1);}
      sigma = std::vector<double>(J, 0);
      
      current_statement__ = 14;
      pos__ = 1;
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 14;
        sigma[(sym1__ - 1)] = context__.vals_r("sigma")[(pos__ - 1)];
        current_statement__ = 14;
        pos__ = (pos__ + 1);}
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "sigma[sym1__]",
                               sigma[(sym1__ - 1)], 0);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 1;
    num_params_r__ += J;
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "eight_schools_ncp_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ mu;
      
      current_statement__ = 2;
      mu = in__.scalar();
      local_scalar_t__ tau;
      
      current_statement__ = 3;
      tau = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        tau = lb_constrain(tau, 0, lp__);
      } else {
        current_statement__ = 3;
        tau = lb_constrain(tau, 0);
      }
      std::vector<local_scalar_t__> theta_tilde;
      theta_tilde = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        theta_tilde[(sym1__ - 1)] = in__.scalar();}
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = 7;
      for (size_t j = 1; j <= J; ++j) {
        current_statement__ = 6;
        theta[(j - 1)] = stan::math::fma(tau, theta_tilde[(j - 1)], mu);}
      {
        current_statement__ = 8;
        lp_accum__.add(normal_log<propto__>(mu, 0, 5));
        current_statement__ = 9;
        lp_accum__.add(cauchy_log<propto__>(tau, 0, 5));
        current_statement__ = 10;
        lp_accum__.add(normal_log<propto__>(theta_tilde, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(normal_log<propto__>(y, theta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "eight_schools_ncp_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double mu;
      
      current_statement__ = 2;
      mu = in__.scalar();
      double tau;
      
      current_statement__ = 3;
      tau = in__.scalar();
      current_statement__ = 3;
      tau = lb_constrain(tau, 0);
      std::vector<double> theta_tilde;
      theta_tilde = std::vector<double>(J, 0);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        theta_tilde[(sym1__ - 1)] = in__.scalar();}
      std::vector<double> theta;
      theta = std::vector<double>(J, 0);
      
      vars__.push_back(mu);
      vars__.push_back(tau);
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.push_back(theta_tilde[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) || primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      for (size_t j = 1; j <= J; ++j) {
        current_statement__ = 6;
        theta[(j - 1)] = stan::math::fma(tau, theta_tilde[(j - 1)], mu);}
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.push_back(theta[(sym1__ - 1)]);}
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double mu;
      
      current_statement__ = 2;
      pos__ = 1;
      current_statement__ = 2;
      mu = context__.vals_r("mu")[(pos__ - 1)];
      double tau;
      
      current_statement__ = 3;
      pos__ = 1;
      current_statement__ = 3;
      tau = context__.vals_r("tau")[(pos__ - 1)];
      current_statement__ = 3;
      tau = lb_free(tau, 0);
      std::vector<double> theta_tilde;
      theta_tilde = std::vector<double>(J, 0);
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        theta_tilde[(sym1__ - 1)] = context__.vals_r("theta_tilde")[(pos__ - 1)];
        current_statement__ = 4;
        pos__ = (pos__ + 1);}
      vars__.push_back(mu);
      vars__.push_back(tau);
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.push_back(theta_tilde[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("mu");
    names__.push_back("tau");
    names__.push_back("theta_tilde");
    names__.push_back("theta");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "mu");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "mu");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_tilde\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_tilde\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

typedef eight_schools_ncp_model_namespace::eight_schools_ncp_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

  $ ../../../../../install/default/bin/stanc --print-cpp mother.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>

template <typename T, typename S>
std::vector<T> resize_to_match(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}

namespace mother_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'mother.stan', line 357, column 2 to column 14)",
                                                      " (in 'mother.stan', line 358, column 2 to column 52)",
                                                      " (in 'mother.stan', line 359, column 2 to column 32)",
                                                      " (in 'mother.stan', line 360, column 2 to column 36)",
                                                      " (in 'mother.stan', line 361, column 2 to column 27)",
                                                      " (in 'mother.stan', line 362, column 2 to column 24)",
                                                      " (in 'mother.stan', line 363, column 2 to column 28)",
                                                      " (in 'mother.stan', line 364, column 2 to column 26)",
                                                      " (in 'mother.stan', line 365, column 2 to column 32)",
                                                      " (in 'mother.stan', line 366, column 2 to column 36)",
                                                      " (in 'mother.stan', line 367, column 2 to column 45)",
                                                      " (in 'mother.stan', line 368, column 2 to column 23)",
                                                      " (in 'mother.stan', line 369, column 2 to column 29)",
                                                      " (in 'mother.stan', line 370, column 2 to column 33)",
                                                      " (in 'mother.stan', line 371, column 2 to column 38)",
                                                      " (in 'mother.stan', line 372, column 2 to column 36)",
                                                      " (in 'mother.stan', line 373, column 2 to column 42)",
                                                      " (in 'mother.stan', line 376, column 2 to column 33)",
                                                      " (in 'mother.stan', line 377, column 2 to column 37)",
                                                      " (in 'mother.stan', line 378, column 2 to column 28)",
                                                      " (in 'mother.stan', line 379, column 2 to column 25)",
                                                      " (in 'mother.stan', line 380, column 2 to column 29)",
                                                      " (in 'mother.stan', line 381, column 2 to column 27)",
                                                      " (in 'mother.stan', line 382, column 2 to column 33)",
                                                      " (in 'mother.stan', line 383, column 2 to column 37)",
                                                      " (in 'mother.stan', line 384, column 2 to column 46)",
                                                      " (in 'mother.stan', line 385, column 2 to column 24)",
                                                      " (in 'mother.stan', line 386, column 2 to column 30)",
                                                      " (in 'mother.stan', line 387, column 2 to column 34)",
                                                      " (in 'mother.stan', line 388, column 2 to column 39)",
                                                      " (in 'mother.stan', line 389, column 2 to column 37)",
                                                      " (in 'mother.stan', line 390, column 2 to column 43)",
                                                      " (in 'mother.stan', line 392, column 2 to column 31)",
                                                      " (in 'mother.stan', line 393, column 2 to column 31)",
                                                      " (in 'mother.stan', line 394, column 2 to column 23)",
                                                      " (in 'mother.stan', line 395, column 2 to column 23)",
                                                      " (in 'mother.stan', line 397, column 2 to column 25)",
                                                      " (in 'mother.stan', line 398, column 2 to column 31)",
                                                      " (in 'mother.stan', line 399, column 2 to column 31)",
                                                      " (in 'mother.stan', line 401, column 2 to column 27)",
                                                      " (in 'mother.stan', line 402, column 2 to column 27)",
                                                      " (in 'mother.stan', line 403, column 2 to column 33)",
                                                      " (in 'mother.stan', line 409, column 10 to column 38)",
                                                      " (in 'mother.stan', line 408, column 23 to line 409, column 39)",
                                                      " (in 'mother.stan', line 408, column 8 to line 409, column 39)",
                                                      " (in 'mother.stan', line 407, column 21 to line 409, column 40)",
                                                      " (in 'mother.stan', line 407, column 6 to line 409, column 40)",
                                                      " (in 'mother.stan', line 406, column 19 to line 409, column 41)",
                                                      " (in 'mother.stan', line 406, column 4 to line 409, column 41)",
                                                      " (in 'mother.stan', line 405, column 17 to line 409, column 42)",
                                                      " (in 'mother.stan', line 405, column 2 to line 409, column 42)",
                                                      " (in 'mother.stan', line 411, column 17 to column 45)",
                                                      " (in 'mother.stan', line 411, column 2 to column 45)",
                                                      " (in 'mother.stan', line 412, column 2 to column 29)",
                                                      " (in 'mother.stan', line 413, column 2 to column 31)",
                                                      " (in 'mother.stan', line 414, column 2 to column 31)",
                                                      " (in 'mother.stan', line 451, column 2 to column 32)",
                                                      " (in 'mother.stan', line 452, column 2 to column 27)",
                                                      " (in 'mother.stan', line 453, column 2 to column 35)",
                                                      " (in 'mother.stan', line 454, column 2 to column 39)",
                                                      " (in 'mother.stan', line 455, column 2 to column 28)",
                                                      " (in 'mother.stan', line 456, column 2 to column 25)",
                                                      " (in 'mother.stan', line 457, column 2 to column 29)",
                                                      " (in 'mother.stan', line 458, column 2 to column 27)",
                                                      " (in 'mother.stan', line 459, column 2 to column 33)",
                                                      " (in 'mother.stan', line 460, column 2 to column 37)",
                                                      " (in 'mother.stan', line 461, column 2 to column 46)",
                                                      " (in 'mother.stan', line 462, column 2 to column 24)",
                                                      " (in 'mother.stan', line 463, column 2 to column 30)",
                                                      " (in 'mother.stan', line 464, column 2 to column 34)",
                                                      " (in 'mother.stan', line 465, column 2 to column 39)",
                                                      " (in 'mother.stan', line 466, column 2 to column 37)",
                                                      " (in 'mother.stan', line 467, column 2 to column 43)",
                                                      " (in 'mother.stan', line 468, column 2 to column 29)",
                                                      " (in 'mother.stan', line 469, column 2 to column 31)",
                                                      " (in 'mother.stan', line 470, column 2 to column 27)",
                                                      " (in 'mother.stan', line 471, column 2 to column 27)",
                                                      " (in 'mother.stan', line 472, column 2 to column 27)",
                                                      " (in 'mother.stan', line 473, column 2 to column 28)",
                                                      " (in 'mother.stan', line 474, column 2 to column 28)",
                                                      " (in 'mother.stan', line 475, column 2 to column 28)",
                                                      " (in 'mother.stan', line 476, column 2 to column 28)",
                                                      " (in 'mother.stan', line 477, column 2 to column 24)",
                                                      " (in 'mother.stan', line 479, column 2 to column 35)",
                                                      " (in 'mother.stan', line 480, column 2 to column 31)",
                                                      " (in 'mother.stan', line 481, column 2 to column 23)",
                                                      " (in 'mother.stan', line 482, column 2 to column 23)",
                                                      " (in 'mother.stan', line 483, column 2 to column 25)",
                                                      " (in 'mother.stan', line 484, column 2 to column 31)",
                                                      " (in 'mother.stan', line 485, column 2 to column 31)",
                                                      " (in 'mother.stan', line 487, column 2 to column 35)",
                                                      " (in 'mother.stan', line 488, column 2 to column 31)",
                                                      " (in 'mother.stan', line 489, column 2 to column 31)",
                                                      " (in 'mother.stan', line 491, column 2 to column 27)",
                                                      " (in 'mother.stan', line 492, column 2 to column 27)",
                                                      " (in 'mother.stan', line 493, column 2 to column 33)",
                                                      " (in 'mother.stan', line 499, column 10 to column 38)",
                                                      " (in 'mother.stan', line 498, column 23 to line 499, column 39)",
                                                      " (in 'mother.stan', line 498, column 8 to line 499, column 39)",
                                                      " (in 'mother.stan', line 497, column 21 to line 499, column 40)",
                                                      " (in 'mother.stan', line 497, column 6 to line 499, column 40)",
                                                      " (in 'mother.stan', line 496, column 19 to line 499, column 41)",
                                                      " (in 'mother.stan', line 496, column 4 to line 499, column 41)",
                                                      " (in 'mother.stan', line 495, column 17 to line 499, column 42)",
                                                      " (in 'mother.stan', line 495, column 2 to line 499, column 42)",
                                                      " (in 'mother.stan', line 501, column 17 to column 45)",
                                                      " (in 'mother.stan', line 501, column 2 to column 45)",
                                                      " (in 'mother.stan', line 508, column 8 to column 49)",
                                                      " (in 'mother.stan', line 507, column 6 to line 508, column 49)",
                                                      " (in 'mother.stan', line 506, column 4 to line 508, column 49)",
                                                      " (in 'mother.stan', line 505, column 2 to line 508, column 49)",
                                                      " (in 'mother.stan', line 513, column 6 to column 60)",
                                                      " (in 'mother.stan', line 512, column 4 to line 513, column 60)",
                                                      " (in 'mother.stan', line 511, column 2 to line 513, column 60)",
                                                      " (in 'mother.stan', line 515, column 2 to column 45)",
                                                      " (in 'mother.stan', line 516, column 64 to column 97)",
                                                      " (in 'mother.stan', line 516, column 2 to column 97)",
                                                      " (in 'mother.stan', line 521, column 6 to column 51)",
                                                      " (in 'mother.stan', line 520, column 4 to line 521, column 51)",
                                                      " (in 'mother.stan', line 519, column 2 to line 521, column 51)",
                                                      " (in 'mother.stan', line 522, column 2 to column 39)",
                                                      " (in 'mother.stan', line 524, column 58 to column 91)",
                                                      " (in 'mother.stan', line 524, column 2 to column 91)",
                                                      " (in 'mother.stan', line 530, column 8 to column 68)",
                                                      " (in 'mother.stan', line 529, column 6 to line 530, column 68)",
                                                      " (in 'mother.stan', line 528, column 4 to line 530, column 68)",
                                                      " (in 'mother.stan', line 527, column 2 to line 530, column 68)",
                                                      " (in 'mother.stan', line 531, column 2 to column 48)",
                                                      " (in 'mother.stan', line 532, column 67 to column 100)",
                                                      " (in 'mother.stan', line 532, column 2 to column 100)",
                                                      " (in 'mother.stan', line 534, column 2 to column 36)",
                                                      " (in 'mother.stan', line 535, column 2 to column 38)",
                                                      " (in 'mother.stan', line 417, column 2 to column 29)",
                                                      " (in 'mother.stan', line 418, column 2 to column 24)",
                                                      " (in 'mother.stan', line 419, column 2 to column 23)",
                                                      " (in 'mother.stan', line 420, column 2 to column 35)",
                                                      " (in 'mother.stan', line 422, column 2 to column 41)",
                                                      " (in 'mother.stan', line 424, column 4 to column 42)",
                                                      " (in 'mother.stan', line 425, column 4 to column 46)",
                                                      " (in 'mother.stan', line 426, column 4 to column 46)",
                                                      " (in 'mother.stan', line 429, column 8 to column 52)",
                                                      " (in 'mother.stan', line 430, column 8 to column 56)",
                                                      " (in 'mother.stan', line 431, column 8 to column 56)",
                                                      " (in 'mother.stan', line 432, column 8 to column 45)",
                                                      " (in 'mother.stan', line 428, column 21 to line 433, column 7)",
                                                      " (in 'mother.stan', line 428, column 6 to line 433, column 7)",
                                                      " (in 'mother.stan', line 427, column 19 to line 434, column 5)",
                                                      " (in 'mother.stan', line 427, column 4 to line 434, column 5)",
                                                      " (in 'mother.stan', line 423, column 17 to line 435, column 3)",
                                                      " (in 'mother.stan', line 423, column 2 to line 435, column 3)",
                                                      " (in 'mother.stan', line 438, column 6 to column 47)",
                                                      " (in 'mother.stan', line 437, column 19 to line 439, column 5)",
                                                      " (in 'mother.stan', line 437, column 4 to line 439, column 5)",
                                                      " (in 'mother.stan', line 436, column 17 to line 440, column 3)",
                                                      " (in 'mother.stan', line 436, column 2 to line 440, column 3)",
                                                      " (in 'mother.stan', line 442, column 4 to column 47)",
                                                      " (in 'mother.stan', line 441, column 17 to line 443, column 3)",
                                                      " (in 'mother.stan', line 441, column 2 to line 443, column 3)",
                                                      " (in 'mother.stan', line 444, column 2 to column 34)",
                                                      " (in 'mother.stan', line 445, column 2 to column 38)",
                                                      " (in 'mother.stan', line 446, column 2 to column 38)",
                                                      " (in 'mother.stan', line 447, column 2 to column 39)",
                                                      " (in 'mother.stan', line 448, column 2 to column 39)",
                                                      " (in 'mother.stan', line 287, column 2 to column 17)",
                                                      " (in 'mother.stan', line 288, column 2 to column 17)",
                                                      " (in 'mother.stan', line 289, column 2 to column 28)",
                                                      " (in 'mother.stan', line 290, column 2 to column 30)",
                                                      " (in 'mother.stan', line 291, column 2 to column 34)",
                                                      " (in 'mother.stan', line 292, column 2 to column 32)",
                                                      " (in 'mother.stan', line 293, column 2 to column 23)",
                                                      " (in 'mother.stan', line 294, column 2 to column 27)",
                                                      " (in 'mother.stan', line 295, column 2 to column 18)",
                                                      " (in 'mother.stan', line 296, column 2 to column 24)",
                                                      " (in 'mother.stan', line 297, column 2 to column 28)",
                                                      " (in 'mother.stan', line 298, column 2 to column 26)",
                                                      " (in 'mother.stan', line 299, column 2 to column 32)",
                                                      " (in 'mother.stan', line 300, column 2 to column 36)",
                                                      " (in 'mother.stan', line 301, column 2 to column 45)",
                                                      " (in 'mother.stan', line 302, column 2 to column 23)",
                                                      " (in 'mother.stan', line 303, column 2 to column 29)",
                                                      " (in 'mother.stan', line 304, column 2 to column 33)",
                                                      " (in 'mother.stan', line 305, column 2 to column 38)",
                                                      " (in 'mother.stan', line 306, column 2 to column 36)",
                                                      " (in 'mother.stan', line 307, column 2 to column 42)",
                                                      " (in 'mother.stan', line 310, column 2 to column 13)",
                                                      " (in 'mother.stan', line 311, column 2 to column 15)",
                                                      " (in 'mother.stan', line 312, column 2 to column 34)",
                                                      " (in 'mother.stan', line 313, column 2 to column 15)",
                                                      " (in 'mother.stan', line 314, column 2 to column 20)",
                                                      " (in 'mother.stan', line 315, column 2 to column 29)",
                                                      " (in 'mother.stan', line 316, column 2 to column 46)",
                                                      " (in 'mother.stan', line 317, column 2 to column 24)",
                                                      " (in 'mother.stan', line 318, column 2 to column 30)",
                                                      " (in 'mother.stan', line 319, column 2 to column 34)",
                                                      " (in 'mother.stan', line 320, column 2 to column 39)",
                                                      " (in 'mother.stan', line 321, column 2 to column 37)",
                                                      " (in 'mother.stan', line 322, column 2 to column 18)",
                                                      " (in 'mother.stan', line 323, column 2 to column 18)",
                                                      " (in 'mother.stan', line 328, column 10 to column 38)",
                                                      " (in 'mother.stan', line 327, column 23 to line 328, column 39)",
                                                      " (in 'mother.stan', line 327, column 8 to line 328, column 39)",
                                                      " (in 'mother.stan', line 326, column 21 to line 328, column 40)",
                                                      " (in 'mother.stan', line 326, column 6 to line 328, column 40)",
                                                      " (in 'mother.stan', line 325, column 19 to line 328, column 41)",
                                                      " (in 'mother.stan', line 325, column 4 to line 328, column 41)",
                                                      " (in 'mother.stan', line 324, column 17 to line 328, column 42)",
                                                      " (in 'mother.stan', line 324, column 2 to line 328, column 42)",
                                                      " (in 'mother.stan', line 330, column 4 to column 28)",
                                                      " (in 'mother.stan', line 332, column 6 to column 36)",
                                                      " (in 'mother.stan', line 335, column 10 to column 46)",
                                                      " (in 'mother.stan', line 334, column 23 to line 335, column 47)",
                                                      " (in 'mother.stan', line 334, column 8 to line 335, column 47)",
                                                      " (in 'mother.stan', line 333, column 21 to line 335, column 48)",
                                                      " (in 'mother.stan', line 333, column 6 to line 335, column 48)",
                                                      " (in 'mother.stan', line 331, column 19 to line 335, column 49)",
                                                      " (in 'mother.stan', line 331, column 4 to line 335, column 49)",
                                                      " (in 'mother.stan', line 329, column 17 to line 335, column 50)",
                                                      " (in 'mother.stan', line 329, column 2 to line 335, column 50)",
                                                      " (in 'mother.stan', line 338, column 6 to column 40)",
                                                      " (in 'mother.stan', line 339, column 6 to column 63)",
                                                      " (in 'mother.stan', line 337, column 19 to line 340, column 5)",
                                                      " (in 'mother.stan', line 337, column 4 to line 340, column 5)",
                                                      " (in 'mother.stan', line 336, column 17 to line 340, column 6)",
                                                      " (in 'mother.stan', line 336, column 2 to line 340, column 6)",
                                                      " (in 'mother.stan', line 341, column 2 to column 62)",
                                                      " (in 'mother.stan', line 342, column 2 to column 62)",
                                                      " (in 'mother.stan', line 344, column 4 to column 11)",
                                                      " (in 'mother.stan', line 345, column 4 to column 35)",
                                                      " (in 'mother.stan', line 346, column 4 to line 348, column 5)",
                                                      " (in 'mother.stan', line 347, column 6 to column 12)",
                                                      " (in 'mother.stan', line 343, column 2 to line 349, column 3)",
                                                      " (in 'mother.stan', line 351, column 2 to column 25)",
                                                      " (in 'mother.stan', line 352, column 2 to column 34)",
                                                      " (in 'mother.stan', line 353, column 2 to column 33)",
                                                      " (in 'mother.stan', line 354, column 2 to column 36)",
                                                      " (in 'mother.stan', line 10, column 16 to column 17)",
                                                      " (in 'mother.stan', line 13, column 16 to column 25)",
                                                      " (in 'mother.stan', line 13, column 4 to column 25)",
                                                      " (in 'mother.stan', line 14, column 4 to column 26)",
                                                      " (in 'mother.stan', line 12, column 17 to line 15, column 3)",
                                                      " (in 'mother.stan', line 22, column 31 to column 32)",
                                                      " (in 'mother.stan', line 29, column 4 to column 17)",
                                                      " (in 'mother.stan', line 30, column 4 to column 19)",
                                                      " (in 'mother.stan', line 31, column 4 to column 38)",
                                                      " (in 'mother.stan', line 32, column 4 to column 16)",
                                                      " (in 'mother.stan', line 28, column 31 to line 33, column 3)",
                                                      " (in 'mother.stan', line 36, column 4 to column 15)",
                                                      " (in 'mother.stan', line 35, column 18 to line 37, column 3)",
                                                      " (in 'mother.stan', line 40, column 4 to column 15)",
                                                      " (in 'mother.stan', line 39, column 24 to line 41, column 3)",
                                                      " (in 'mother.stan', line 44, column 4 to column 15)",
                                                      " (in 'mother.stan', line 43, column 32 to line 45, column 3)",
                                                      " (in 'mother.stan', line 48, column 4 to column 15)",
                                                      " (in 'mother.stan', line 47, column 36 to line 49, column 3)",
                                                      " (in 'mother.stan', line 52, column 4 to column 15)",
                                                      " (in 'mother.stan', line 51, column 36 to line 53, column 3)",
                                                      " (in 'mother.stan', line 56, column 4 to column 15)",
                                                      " (in 'mother.stan', line 55, column 37 to line 57, column 3)",
                                                      " (in 'mother.stan', line 60, column 4 to column 42)",
                                                      " (in 'mother.stan', line 61, column 4 to column 26)",
                                                      " (in 'mother.stan', line 59, column 30 to line 62, column 3)",
                                                      " (in 'mother.stan', line 66, column 14 to column 20)",
                                                      " (in 'mother.stan', line 66, column 4 to column 20)",
                                                      " (in 'mother.stan', line 67, column 14 to column 23)",
                                                      " (in 'mother.stan', line 67, column 4 to column 23)",
                                                      " (in 'mother.stan', line 70, column 20 to column 26)",
                                                      " (in 'mother.stan', line 70, column 4 to column 26)",
                                                      " (in 'mother.stan', line 71, column 20 to column 29)",
                                                      " (in 'mother.stan', line 71, column 4 to column 29)",
                                                      " (in 'mother.stan', line 75, column 6 to column 12)",
                                                      " (in 'mother.stan', line 76, column 6 to column 12)",
                                                      " (in 'mother.stan', line 77, column 6 to column 12)",
                                                      " (in 'mother.stan', line 74, column 14 to line 78, column 5)",
                                                      " (in 'mother.stan', line 74, column 4 to line 78, column 5)",
                                                      " (in 'mother.stan', line 84, column 11 to column 17)",
                                                      " (in 'mother.stan', line 83, column 18 to column 24)",
                                                      " (in 'mother.stan', line 83, column 11 to line 84, column 17)",
                                                      " (in 'mother.stan', line 82, column 13 to column 19)",
                                                      " (in 'mother.stan', line 82, column 6 to line 84, column 17)",
                                                      " (in 'mother.stan', line 81, column 14 to line 85, column 5)",
                                                      " (in 'mother.stan', line 81, column 4 to line 85, column 5)",
                                                      " (in 'mother.stan', line 88, column 24 to column 30)",
                                                      " (in 'mother.stan', line 88, column 14 to column 30)",
                                                      " (in 'mother.stan', line 88, column 4 to column 30)",
                                                      " (in 'mother.stan', line 92, column 22 to column 28)",
                                                      " (in 'mother.stan', line 92, column 6 to column 28)",
                                                      " (in 'mother.stan', line 91, column 14 to line 93, column 5)",
                                                      " (in 'mother.stan', line 91, column 4 to line 93, column 5)",
                                                      " (in 'mother.stan', line 97, column 6 to column 19)",
                                                      " (in 'mother.stan', line 98, column 6 to column 12)",
                                                      " (in 'mother.stan', line 99, column 6 to line 102, column 7)",
                                                      " (in 'mother.stan', line 100, column 8 to column 14)",
                                                      " (in 'mother.stan', line 101, column 8 to column 14)",
                                                      " (in 'mother.stan', line 103, column 6 to line 106, column 7)",
                                                      " (in 'mother.stan', line 104, column 8 to column 14)",
                                                      " (in 'mother.stan', line 105, column 8 to column 17)",
                                                      " (in 'mother.stan', line 107, column 6 to line 113, column 7)",
                                                      " (in 'mother.stan', line 108, column 8 to line 111, column 9)",
                                                      " (in 'mother.stan', line 109, column 10 to column 16)",
                                                      " (in 'mother.stan', line 110, column 10 to column 16)",
                                                      " (in 'mother.stan', line 112, column 8 to column 14)",
                                                      " (in 'mother.stan', line 96, column 14 to line 114, column 5)",
                                                      " (in 'mother.stan', line 96, column 4 to line 114, column 5)",
                                                      " (in 'mother.stan', line 118, column 6 to column 13)",
                                                      " (in 'mother.stan', line 119, column 6 to column 21)",
                                                      " (in 'mother.stan', line 120, column 6 to line 123, column 7)",
                                                      " (in 'mother.stan', line 121, column 8 to column 14)",
                                                      " (in 'mother.stan', line 122, column 8 to column 14)",
                                                      " (in 'mother.stan', line 124, column 6 to line 127, column 7)",
                                                      " (in 'mother.stan', line 125, column 8 to column 16)",
                                                      " (in 'mother.stan', line 126, column 8 to column 17)",
                                                      " (in 'mother.stan', line 117, column 14 to line 128, column 5)",
                                                      " (in 'mother.stan', line 117, column 4 to line 128, column 5)",
                                                      " (in 'mother.stan', line 132, column 6 to column 13)",
                                                      " (in 'mother.stan', line 133, column 6 to column 19)",
                                                      " (in 'mother.stan', line 134, column 6 to line 137, column 7)",
                                                      " (in 'mother.stan', line 135, column 8 to column 14)",
                                                      " (in 'mother.stan', line 136, column 8 to column 14)",
                                                      " (in 'mother.stan', line 138, column 6 to line 141, column 7)",
                                                      " (in 'mother.stan', line 139, column 8 to column 16)",
                                                      " (in 'mother.stan', line 140, column 8 to column 17)",
                                                      " (in 'mother.stan', line 131, column 14 to line 142, column 5)",
                                                      " (in 'mother.stan', line 131, column 4 to line 142, column 5)",
                                                      " (in 'mother.stan', line 146, column 6 to column 13)",
                                                      " (in 'mother.stan', line 147, column 6 to column 23)",
                                                      " (in 'mother.stan', line 148, column 6 to line 151, column 7)",
                                                      " (in 'mother.stan', line 149, column 8 to column 14)",
                                                      " (in 'mother.stan', line 150, column 8 to column 14)",
                                                      " (in 'mother.stan', line 152, column 6 to line 155, column 7)",
                                                      " (in 'mother.stan', line 153, column 8 to column 16)",
                                                      " (in 'mother.stan', line 154, column 8 to column 17)",
                                                      " (in 'mother.stan', line 145, column 14 to line 156, column 5)",
                                                      " (in 'mother.stan', line 145, column 4 to line 156, column 5)",
                                                      " (in 'mother.stan', line 160, column 6 to column 12)",
                                                      " (in 'mother.stan', line 161, column 6 to column 12)",
                                                      " (in 'mother.stan', line 163, column 8 to column 14)",
                                                      " (in 'mother.stan', line 164, column 8 to column 14)",
                                                      " (in 'mother.stan', line 165, column 8 to column 14)",
                                                      " (in 'mother.stan', line 162, column 6 to line 166, column 7)",
                                                      " (in 'mother.stan', line 159, column 14 to line 167, column 5)",
                                                      " (in 'mother.stan', line 159, column 4 to line 167, column 5)",
                                                      " (in 'mother.stan', line 169, column 4 to column 13)",
                                                      " (in 'mother.stan', line 64, column 19 to line 170, column 3)",
                                                      " (in 'mother.stan', line 173, column 4 to column 14)",
                                                      " (in 'mother.stan', line 174, column 4 to column 10)",
                                                      " (in 'mother.stan', line 175, column 4 to column 24)",
                                                      " (in 'mother.stan', line 175, column 18 to column 24)",
                                                      " (in 'mother.stan', line 176, column 4 to column 13)",
                                                      " (in 'mother.stan', line 172, column 19 to line 177, column 3)",
                                                      " (in 'mother.stan', line 180, column 4 to column 26)",
                                                      " (in 'mother.stan', line 179, column 30 to line 181, column 3)",
                                                      " (in 'mother.stan', line 184, column 4 to column 24)",
                                                      " (in 'mother.stan', line 183, column 22 to line 185, column 3)",
                                                      " (in 'mother.stan', line 188, column 4 to column 42)",
                                                      " (in 'mother.stan', line 187, column 21 to line 189, column 3)",
                                                      " (in 'mother.stan', line 192, column 4 to column 18)",
                                                      " (in 'mother.stan', line 193, column 4 to column 19)",
                                                      " (in 'mother.stan', line 194, column 4 to column 27)",
                                                      " (in 'mother.stan', line 195, column 4 to column 40)",
                                                      " (in 'mother.stan', line 197, column 6 to column 81)",
                                                      " (in 'mother.stan', line 196, column 4 to line 197, column 81)",
                                                      " (in 'mother.stan', line 199, column 6 to column 81)",
                                                      " (in 'mother.stan', line 198, column 4 to line 199, column 81)",
                                                      " (in 'mother.stan', line 200, column 4 to column 32)",
                                                      " (in 'mother.stan', line 191, column 59 to line 201, column 3)",
                                                      " (in 'mother.stan', line 205, column 4 to column 22)",
                                                      " (in 'mother.stan', line 204, column 52 to line 206, column 3)",
                                                      " (in 'mother.stan', line 209, column 4 to column 14)",
                                                      " (in 'mother.stan', line 208, column 66 to line 210, column 3)",
                                                      " (in 'mother.stan', line 212, column 4 to column 14)",
                                                      " (in 'mother.stan', line 211, column 78 to line 213, column 3)",
                                                      " (in 'mother.stan', line 216, column 4 to column 35)",
                                                      " (in 'mother.stan', line 217, column 4 to column 12)",
                                                      " (in 'mother.stan', line 218, column 4 to column 16)",
                                                      " (in 'mother.stan', line 219, column 4 to column 20)",
                                                      " (in 'mother.stan', line 220, column 4 to column 13)",
                                                      " (in 'mother.stan', line 215, column 49 to line 221, column 3)",
                                                      " (in 'mother.stan', line 223, column 4 to column 16)",
                                                      " (in 'mother.stan', line 222, column 150 to line 224, column 3)",
                                                      " (in 'mother.stan', line 227, column 4 to column 14)",
                                                      " (in 'mother.stan', line 226, column 149 to line 228, column 3)",
                                                      " (in 'mother.stan', line 231, column 4 to column 14)",
                                                      " (in 'mother.stan', line 230, column 151 to line 232, column 3)",
                                                      " (in 'mother.stan', line 235, column 4 to column 14)",
                                                      " (in 'mother.stan', line 234, column 152 to line 236, column 3)",
                                                      " (in 'mother.stan', line 239, column 4 to column 14)",
                                                      " (in 'mother.stan', line 238, column 150 to line 240, column 3)",
                                                      " (in 'mother.stan', line 243, column 4 to column 14)",
                                                      " (in 'mother.stan', line 242, column 152 to line 244, column 3)",
                                                      " (in 'mother.stan', line 247, column 4 to column 14)",
                                                      " (in 'mother.stan', line 246, column 153 to line 248, column 3)",
                                                      " (in 'mother.stan', line 251, column 4 to column 14)",
                                                      " (in 'mother.stan', line 250, column 152 to line 252, column 3)",
                                                      " (in 'mother.stan', line 255, column 4 to column 14)",
                                                      " (in 'mother.stan', line 254, column 154 to line 256, column 3)",
                                                      " (in 'mother.stan', line 259, column 4 to column 14)",
                                                      " (in 'mother.stan', line 258, column 155 to line 260, column 3)",
                                                      " (in 'mother.stan', line 263, column 4 to column 15)",
                                                      " (in 'mother.stan', line 262, column 153 to line 264, column 3)",
                                                      " (in 'mother.stan', line 267, column 4 to column 15)",
                                                      " (in 'mother.stan', line 266, column 155 to line 268, column 3)",
                                                      " (in 'mother.stan', line 271, column 4 to column 15)",
                                                      " (in 'mother.stan', line 270, column 156 to line 272, column 3)",
                                                      " (in 'mother.stan', line 274, column 4 to column 10)",
                                                      " (in 'mother.stan', line 275, column 4 to column 11)",
                                                      " (in 'mother.stan', line 276, column 4 to column 18)",
                                                      " (in 'mother.stan', line 277, column 4 to column 32)",
                                                      " (in 'mother.stan', line 278, column 4 to column 24)",
                                                      " (in 'mother.stan', line 273, column 14 to line 279, column 3)"};

template <typename T0__>
T0__
foo(const T0__& n, std::ostream* pstream__) ;

template <typename T0__>
T0__
foo(const T0__& n, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 239;
    if (logical_eq(n, 0)) {
      current_statement__ = 238;
      return 1;
    } 
    current_statement__ = 240;
    return (n * foo((n - 1), pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
template <typename T0__>
T0__
operator()(const T0__& n, std::ostream* pstream__)  const 
{
return foo(n, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<T3__>& x,
    const std::vector<T4__>& x_int, std::ostream* pstream__) ;

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<T3__>& x,
    const std::vector<T4__>& x_int, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(2, 0);
    
    current_statement__ = 244;
    dydt[(1 - 1)] = y[(2 - 1)];
    current_statement__ = 245;
    dydt[(2 - 1)] = (-y[(1 - 1)] - (theta[(1 - 1)] * y[(2 - 1)]));
    current_statement__ = 246;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF sho") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sho_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x,
           const std::vector<T4__>& x_int, std::ostream* pstream__)  const 
{
return sho(t, y, theta, x, x_int, pstream__);
}
};

double
foo_bar0(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 248;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_bar0") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar0_functor__ {
double
operator()(std::ostream* pstream__)  const 
{
return foo_bar0(pstream__);
}
};

template <typename T0__>
T0__
foo_bar1(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 250;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_bar1") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar1_functor__ {
template <typename T0__>
T0__
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return foo_bar1(x, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_bar2(const T0__& x, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 252;
    return 2.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_bar2") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar2_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& x, const T1__& y, std::ostream* pstream__)  const 
{
return foo_bar2(x, y, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_lpmf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 254;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lpmf") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lpmf_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lpmf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_lcdf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 256;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lcdf") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lcdf_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lcdf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
foo_lccdf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 258;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lccdf") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lccdf_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lccdf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
void
unit_normal_lp(const T0__& u, const T1__& lp__, const T2__& lp_accum__,
               std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 260;
    lp_accum__.add(normal_log<false>(u, 0, 1));
    current_statement__ = 261;
    lp_accum__.add(uniform_log<propto__>(u, -100, 100));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF unit_normal_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct unit_normal_lp_functor__ {
template <typename T0__, typename T1__, typename T2__>
void
operator()(const T0__& u, const T1__& lp__, const T2__& lp_accum__,
           std::ostream* pstream__)  const 
{
return unit_normal_lp(u, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
T0__
foo_1(const T0__& a, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 264;
    while (1) {
      break;
    }
    current_statement__ = 266;
    while (0) {
      continue;
    }
    current_statement__ = 268;
    for (size_t i = 1; i <= 10; ++i) { break;}
    current_statement__ = 270;
    for (size_t i = 1; i <= 10; ++i) { continue;}
    current_statement__ = 275;
    while (1) {
      int b;
      
      current_statement__ = 272;
      b = 5;
      break;
    }
    current_statement__ = 282;
    while (1) {
      current_statement__ = 280;
      if (0) {
        break;
      } else {
        current_statement__ = 278;
        if (1) {
          break;
        } else {
          break;
        }
      }
    }
    current_statement__ = 285;
    while (1) {
      current_statement__ = 284;
      while (0) {
        break;
      }
    }
    current_statement__ = 289;
    while (1) {
      current_statement__ = 287;
      for (size_t i = 1; i <= 10; ++i) { break;}
    }
    current_statement__ = 304;
    while (1) {
      std::vector<std::vector<int>> vs;
      vs = std::vector<std::vector<int>>(2, std::vector<int>(3, 0));
      
      int z;
      
      current_statement__ = 292;
      for (size_t sym2__ = 1; sym2__ <= stan::length(vs); ++sym2__) {
        std::vector<int> v;
        current_statement__ = 292;
        v = vs[(sym2__ - 1)];
        current_statement__ = 293;
        z = 0;
        break;}
      current_statement__ = 295;
      for (size_t sym3__ = 1; sym3__ <= stan::length(vs); ++sym3__) {
        std::vector<int> v;
        current_statement__ = 295;
        v = vs[(sym3__ - 1)];
        current_statement__ = 296;
        z = 0;
        continue;}
      current_statement__ = 298;
      for (size_t sym4__ = 1; sym4__ <= stan::length(vs); ++sym4__) {
        std::vector<int> v;
        current_statement__ = 298;
        v = vs[(sym4__ - 1)];
        current_statement__ = 299;
        for (size_t sym5__ = 1; sym5__ <= stan::length(v); ++sym5__) {
          int vv;
          current_statement__ = 299;
          vv = v[(sym5__ - 1)];
          current_statement__ = 300;
          z = 0;
          break;}
        current_statement__ = 302;
        z = 1;}
    }
    current_statement__ = 314;
    while (1) {
      local_scalar_t__ z;
      
      Eigen::Matrix<local_scalar_t__, -1, -1> vs;
      vs = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3);
      
      current_statement__ = 307;
      for (size_t sym6__ = 1; sym6__ <= stan::length(vs); ++sym6__) {
        double v;
        current_statement__ = 307;
        v = rvalue(vs, cons_list(index_uni(sym6__), nil_index_list()), "pretty printed e");
        current_statement__ = 308;
        z = 0;
        break;}
      current_statement__ = 310;
      for (size_t sym7__ = 1; sym7__ <= stan::length(vs); ++sym7__) {
        double v;
        current_statement__ = 310;
        v = rvalue(vs, cons_list(index_uni(sym7__), nil_index_list()), "pretty printed e");
        current_statement__ = 311;
        z = 3.1;
        continue;}
    }
    current_statement__ = 324;
    while (1) {
      local_scalar_t__ z;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> vs;
      vs = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      
      current_statement__ = 317;
      for (size_t sym8__ = 1; sym8__ <= stan::length(vs); ++sym8__) {
        double v;
        current_statement__ = 317;
        v = vs[(sym8__ - 1)];
        current_statement__ = 318;
        z = 0;
        break;}
      current_statement__ = 320;
      for (size_t sym9__ = 1; sym9__ <= stan::length(vs); ++sym9__) {
        double v;
        current_statement__ = 320;
        v = vs[(sym9__ - 1)];
        current_statement__ = 321;
        z = 3.2;
        continue;}
    }
    current_statement__ = 334;
    while (1) {
      local_scalar_t__ z;
      
      Eigen::Matrix<local_scalar_t__, 1, -1> vs;
      vs = Eigen::Matrix<local_scalar_t__, 1, -1>(2);
      
      current_statement__ = 327;
      for (size_t sym10__ = 1; sym10__ <= stan::length(vs); ++sym10__) {
        double v;
        current_statement__ = 327;
        v = vs[(sym10__ - 1)];
        current_statement__ = 328;
        z = 0;
        break;}
      current_statement__ = 330;
      for (size_t sym11__ = 1; sym11__ <= stan::length(vs); ++sym11__) {
        double v;
        current_statement__ = 330;
        v = vs[(sym11__ - 1)];
        current_statement__ = 331;
        z = 3.3;
        continue;}
    }
    current_statement__ = 342;
    while (1) {
      int b;
      
      current_statement__ = 336;
      b = 5;
      {
        int c;
        
        current_statement__ = 338;
        c = 6;
        break;
      }
    }
    current_statement__ = 343;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_1") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_1_functor__ {
template <typename T0__>
T0__
operator()(const T0__& a, std::ostream* pstream__)  const 
{
return foo_1(a, pstream__);
}
};

template <typename T0__>
T0__
foo_2(const T0__& a, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<int> vs;
    vs = std::vector<int>(2, 0);
    
    int y;
    
    current_statement__ = 347;
    for (size_t sym12__ = 1; sym12__ <= stan::length(vs); ++sym12__) {
      int v;
      current_statement__ = 347;
      v = vs[(sym12__ - 1)];
      current_statement__ = 348;
      y = v;}
    current_statement__ = 349;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_2") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_2_functor__ {
template <typename T0__>
T0__
operator()(const T0__& a, std::ostream* pstream__)  const 
{
return foo_2(a, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__,
T1__>::type>
foo_3(const T0__& t, const T1__& n, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 351;
    return rep_array(t, n);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_3") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_3_functor__ {
template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__,
T1__>::type>
operator()(const T0__& t, const T1__& n, std::ostream* pstream__)  const 
{
return foo_3(t, n, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
foo_lp(const T0__& x, const T1__& lp__, const T2__& lp_accum__,
       std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 353;
    return (x + get_lp(lp__, lp_accum__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lp_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__,
T2__>::type
operator()(const T0__& x, const T1__& lp__, const T2__& lp_accum__,
           std::ostream* pstream__)  const 
{
return foo_lp(x, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
void
foo_4(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 355;
    std::stringstream errmsg_stream__;
    errmsg_stream__ << "user-specified rejection";
    errmsg_stream__ << x;
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_4") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_4_functor__ {
template <typename T0__>
void
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return foo_4(x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type
relative_diff(const T0__& x, const T1__& y, const T2__& max_,
              const T3__& min_, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ abs_diff;
    
    local_scalar_t__ avg_scale;
    
    current_statement__ = 359;
    abs_diff = stan::math::fabs((x - y));
    current_statement__ = 360;
    avg_scale = ((stan::math::fabs(x) + stan::math::fabs(y)) / 2);
    current_statement__ = 362;
    if (logical_gt((abs_diff / avg_scale), max_)) {
      current_statement__ = 361;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "user-specified rejection, difference above ";
      errmsg_stream__ << max_;
      errmsg_stream__ << " x:";
      errmsg_stream__ << x;
      errmsg_stream__ << " y:";
      errmsg_stream__ << y;
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 364;
    if (logical_lt((abs_diff / avg_scale), min_)) {
      current_statement__ = 363;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "user-specified rejection, difference below ";
      errmsg_stream__ << min_;
      errmsg_stream__ << " x:";
      errmsg_stream__ << x;
      errmsg_stream__ << " y:";
      errmsg_stream__ << y;
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 365;
    return (abs_diff / avg_scale);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF relative_diff") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct relative_diff_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type
operator()(const T0__& x, const T1__& y, const T2__& max_, const T3__& min_,
           std::ostream* pstream__)  const 
{
return relative_diff(x, y, max_, min_, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
foo_5(const Eigen::Matrix<T0__, -1, 1>& shared_params,
      const Eigen::Matrix<T1__, -1, 1>& job_params,
      const std::vector<T2__>& data_r, const std::vector<T3__>& data_i,
      std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 367;
    return transpose(stan::math::to_row_vector({1, 2, 3}));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_5") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_5_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& shared_params,
           const Eigen::Matrix<T1__, -1, 1>& job_params,
           const std::vector<T2__>& data_r, const std::vector<T3__>& data_i,
           std::ostream* pstream__)  const 
{
return foo_5(shared_params, job_params, data_r, data_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
foo_five_args(const T0__& x1, const T1__& x2, const T2__& x3, const T3__& x4,
              const T4__& x5, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 369;
    return x1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_five_args") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_five_args_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__>::type
operator()(const T0__& x1, const T1__& x2, const T2__& x3, const T3__& x4,
           const T4__& x5, std::ostream* pstream__)  const 
{
return foo_five_args(x1, x2, x3, x4, x5, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__,
T7__>::type>::type
foo_five_args_lp(const T0__& x1, const T1__& x2, const T2__& x3,
                 const T3__& x4, const T4__& x5, const T5__& x6,
                 const T6__& lp__, const T7__& lp_accum__,
                 std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 371;
    return x1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_five_args_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_five_args_lp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__,
T7__>::type>::type
operator()(const T0__& x1, const T1__& x2, const T2__& x3, const T3__& x4,
           const T4__& x5, const T5__& x6, const T6__& lp__,
           const T7__& lp_accum__, std::ostream* pstream__)  const 
{
return foo_five_args_lp(x1, x2, x3, x4, x5, x6, lp__, lp_accum__, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, -1>
covsqrt2corsqrt(const Eigen::Matrix<T0__, -1, -1>& mat, const T1__& invert,
                std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, -1> o;
    o = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(mat), cols(mat));
    
    current_statement__ = 374;
    o = mat;
    current_statement__ = 375;
    assign(o, cons_list(index_uni(1), nil_index_list()), stan::model::deep_copy(
           rvalue(o, cons_list(index_uni(2), nil_index_list()), "pretty printed e")), "assigning variable o");
    current_statement__ = 376;
    assign(o, cons_list(index_min_max(3, 4), nil_index_list()), stan::model::deep_copy(
           rvalue(o, cons_list(index_min_max(1, 2), nil_index_list()), "pretty printed e")), "assigning variable o");
    current_statement__ = 377;
    return o;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF covsqrt2corsqrt") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct covsqrt2corsqrt_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__,
T1__>::type, -1, -1>
operator()(const Eigen::Matrix<T0__, -1, -1>& mat, const T1__& invert,
           std::ostream* pstream__)  const 
{
return covsqrt2corsqrt(mat, invert, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
void
f0(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 379;
    if (pstream__) {
      stan_print(pstream__, "hi");
      stan_print(pstream__, "\n");
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f0") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f0_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
void
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
f1(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 381;
    return a1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f1") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f1_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f1(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>
f2(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 383;
    return a2;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f2") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f2_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>>
f3(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 385;
    return a3;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f3") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f3_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f3(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
f4(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 387;
    return a4;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f4") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f4_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>
f5(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 389;
    return a5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f5") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f5_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f5(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>>
f6(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 391;
    return a6;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f6") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f6_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type>>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f6(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, 1>
f7(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 393;
    return a7;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f7") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f7_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, 1>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f7(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, 1>>
f8(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 395;
    return a8;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f8") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f8_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, 1>>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, 1>>>
f9(const T0__& a1, const std::vector<T1__>& a2,
   const std::vector<std::vector<T2__>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const Eigen::Matrix<T6__, -1, 1>& a7,
   const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const Eigen::Matrix<T9__, -1, -1>& a10,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 397;
    return a9;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f9") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f9_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, 1>>>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f9(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, -1>
f10(const T0__& a1, const std::vector<T1__>& a2,
    const std::vector<std::vector<T2__>>& a3, const T3__& a4,
    const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
    const Eigen::Matrix<T6__, -1, 1>& a7,
    const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
    const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
    const Eigen::Matrix<T9__, -1, -1>& a10,
    const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
    const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
    std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 399;
    return a10;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f10") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f10_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, -1>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f10(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, -1>>
f11(const T0__& a1, const std::vector<T1__>& a2,
    const std::vector<std::vector<T2__>>& a3, const T3__& a4,
    const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
    const Eigen::Matrix<T6__, -1, 1>& a7,
    const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
    const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
    const Eigen::Matrix<T9__, -1, -1>& a10,
    const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
    const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
    std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 401;
    return a11;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f11") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f11_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, -1>>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, -1>>>
f12(const T0__& a1, const std::vector<T1__>& a2,
    const std::vector<std::vector<T2__>>& a3, const T3__& a4,
    const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
    const Eigen::Matrix<T6__, -1, 1>& a7,
    const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
    const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
    const Eigen::Matrix<T9__, -1, -1>& a10,
    const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
    const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
    std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__,
          T7__,
          T8__,
          T9__, typename boost::math::tools::promote_args<T10__,
          T11__>::type>::type>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 403;
    return a12;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF f12") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f12_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__,
T9__, typename boost::math::tools::promote_args<T10__,
T11__>::type>::type>::type, -1, -1>>>
operator()(const T0__& a1, const std::vector<T1__>& a2,
           const std::vector<std::vector<T2__>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6,
           const Eigen::Matrix<T6__, -1, 1>& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const Eigen::Matrix<T9__, -1, -1>& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f12(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

void
foo_6(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int a;
    
    local_scalar_t__ b;
    
    std::vector<std::vector<local_scalar_t__>> c;
    c = std::vector<std::vector<local_scalar_t__>>(20, std::vector<local_scalar_t__>(30, 0));
    
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> ar_mat;
    ar_mat = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(60, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(70, Eigen::Matrix<local_scalar_t__, -1, -1>(40, 50)));
    
    current_statement__ = 409;
    assign(ar_mat, cons_list(index_uni(1), cons_list(index_uni(1), cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())))), b, "assigning variable ar_mat");
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_6") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_6_functor__ {
void
operator()(std::ostream* pstream__)  const 
{
return foo_6(pstream__);
}
};

class mother_model : public model_base_crtp<mother_model> {

 private:
  int pos__;
  int N;
  int M;
  int K;
  std::vector<int> d_int_1d_ar;
  std::vector<std::vector<std::vector<int>>> d_int_3d_ar;
  double J;
  std::vector<double> d_real_1d_ar;
  std::vector<std::vector<std::vector<double>>> d_real_3d_ar;
  Eigen::Matrix<double, -1, 1> d_vec;
  std::vector<Eigen::Matrix<double, -1, 1>> d_1d_vec;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_vec;
  Eigen::Matrix<double, 1, -1> d_row_vec;
  std::vector<Eigen::Matrix<double, 1, -1>> d_1d_row_vec;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> d_3d_row_vec;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> d_ar_mat;
  Eigen::Matrix<double, -1, 1> d_simplex;
  std::vector<Eigen::Matrix<double, -1, 1>> d_1d_simplex;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_simplex;
  Eigen::Matrix<double, -1, -1> d_cfcov_54;
  Eigen::Matrix<double, -1, -1> d_cfcov_33;
  std::vector<Eigen::Matrix<double, -1, -1>> d_cfcov_33_ar;
  int td_int;
  std::vector<int> td_1d;
  std::vector<int> td_1dk;
  int td_a;
  double td_b;
  double td_c;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> td_ar_mat;
  Eigen::Matrix<double, -1, 1> td_simplex;
  std::vector<Eigen::Matrix<double, -1, 1>> td_1d_simplex;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> td_3d_simplex;
  Eigen::Matrix<double, -1, -1> td_cfcov_54;
  Eigen::Matrix<double, -1, -1> td_cfcov_33;
 
 public:
  ~mother_model() { }
  
  std::string model_name() const { return "mother_model"; }
  
  mother_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "mother_model_namespace::mother_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      
      current_statement__ = 165;
      pos__ = 1;
      current_statement__ = 165;
      N = context__.vals_i("N")[(pos__ - 1)];
      
      current_statement__ = 166;
      pos__ = 1;
      current_statement__ = 166;
      M = context__.vals_i("M")[(pos__ - 1)];
      
      current_statement__ = 167;
      pos__ = 1;
      current_statement__ = 167;
      K = context__.vals_i("K")[(pos__ - 1)];
      d_int_1d_ar = std::vector<int>(N, 0);
      
      current_statement__ = 168;
      pos__ = 1;
      current_statement__ = 168;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 168;
        d_int_1d_ar[(sym13__ - 1)] = context__.vals_i("d_int_1d_ar")[(pos__ - 1)];
        current_statement__ = 168;
        pos__ = (pos__ + 1);}
      d_int_3d_ar = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(M, std::vector<int>(K, 0)));
      
      current_statement__ = 169;
      pos__ = 1;
      current_statement__ = 169;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 169;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 169;
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            current_statement__ = 169;
            d_int_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_i("d_int_3d_ar")[(pos__ - 1)];
            current_statement__ = 169;
            pos__ = (pos__ + 1);}}}
      
      current_statement__ = 170;
      pos__ = 1;
      current_statement__ = 170;
      J = context__.vals_r("J")[(pos__ - 1)];
      d_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 171;
      pos__ = 1;
      current_statement__ = 171;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 171;
        d_real_1d_ar[(sym13__ - 1)] = context__.vals_r("d_real_1d_ar")[(pos__ - 1)];
        current_statement__ = 171;
        pos__ = (pos__ + 1);}
      d_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 172;
      pos__ = 1;
      current_statement__ = 172;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 172;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 172;
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            current_statement__ = 172;
            d_real_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_real_3d_ar")[(pos__ - 1)];
            current_statement__ = 172;
            pos__ = (pos__ + 1);}}}
      d_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 173;
      pos__ = 1;
      current_statement__ = 173;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 173;
        d_vec[(sym13__ - 1)] = context__.vals_r("d_vec")[(pos__ - 1)];
        current_statement__ = 173;
        pos__ = (pos__ + 1);}
      d_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 174;
      pos__ = 1;
      current_statement__ = 174;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 174;
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          current_statement__ = 174;
          d_1d_vec[(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_1d_vec")[(pos__ - 1)];
          current_statement__ = 174;
          pos__ = (pos__ + 1);}}
      d_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 175;
      pos__ = 1;
      current_statement__ = 175;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 175;
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          current_statement__ = 175;
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            current_statement__ = 175;
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              current_statement__ = 175;
              d_3d_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_3d_vec")[(pos__ - 1)];
              current_statement__ = 175;
              pos__ = (pos__ + 1);}}}}
      d_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 176;
      pos__ = 1;
      current_statement__ = 176;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 176;
        d_row_vec[(sym13__ - 1)] = context__.vals_r("d_row_vec")[(pos__ - 1)];
        current_statement__ = 176;
        pos__ = (pos__ + 1);}
      d_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 177;
      pos__ = 1;
      current_statement__ = 177;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 177;
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          current_statement__ = 177;
          d_1d_row_vec[(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_1d_row_vec")[(pos__ - 1)];
          current_statement__ = 177;
          pos__ = (pos__ + 1);}}
      d_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 178;
      pos__ = 1;
      current_statement__ = 178;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 178;
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          current_statement__ = 178;
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            current_statement__ = 178;
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              current_statement__ = 178;
              d_3d_row_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_3d_row_vec")[(pos__ - 1)];
              current_statement__ = 178;
              pos__ = (pos__ + 1);}}}}
      d_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 179;
      pos__ = 1;
      current_statement__ = 179;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 179;
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          current_statement__ = 179;
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            current_statement__ = 179;
            for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
              current_statement__ = 179;
              assign(d_ar_mat, cons_list(index_uni(sym16__), cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())))), context__.vals_r("d_ar_mat")[(pos__ - 1)], "assigning variable d_ar_mat");
              current_statement__ = 179;
              pos__ = (pos__ + 1);}}}}
      d_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 180;
      pos__ = 1;
      current_statement__ = 180;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 180;
        d_simplex[(sym13__ - 1)] = context__.vals_r("d_simplex")[(pos__ - 1)];
        current_statement__ = 180;
        pos__ = (pos__ + 1);}
      d_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 181;
      pos__ = 1;
      current_statement__ = 181;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 181;
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          current_statement__ = 181;
          d_1d_simplex[(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_1d_simplex")[(pos__ - 1)];
          current_statement__ = 181;
          pos__ = (pos__ + 1);}}
      d_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 182;
      pos__ = 1;
      current_statement__ = 182;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 182;
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          current_statement__ = 182;
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            current_statement__ = 182;
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              current_statement__ = 182;
              d_3d_simplex[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("d_3d_simplex")[(pos__ - 1)];
              current_statement__ = 182;
              pos__ = (pos__ + 1);}}}}
      d_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 183;
      pos__ = 1;
      current_statement__ = 183;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 183;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 183;
          assign(d_cfcov_54, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), context__.vals_r("d_cfcov_54")[(pos__ - 1)], "assigning variable d_cfcov_54");
          current_statement__ = 183;
          pos__ = (pos__ + 1);}}
      d_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 184;
      pos__ = 1;
      current_statement__ = 184;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 184;
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          current_statement__ = 184;
          assign(d_cfcov_33, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), context__.vals_r("d_cfcov_33")[(pos__ - 1)], "assigning variable d_cfcov_33");
          current_statement__ = 184;
          pos__ = (pos__ + 1);}}
      d_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 185;
      pos__ = 1;
      current_statement__ = 185;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 185;
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          current_statement__ = 185;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 185;
            assign(d_cfcov_33_ar, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), context__.vals_r("d_cfcov_33_ar")[(pos__ - 1)], "assigning variable d_cfcov_33_ar");
            current_statement__ = 185;
            pos__ = (pos__ + 1);}}}
      
      td_1d = std::vector<int>(N, 0);
      
      td_1dk = std::vector<int>(M, 0);
      
      current_statement__ = 188;
      td_1dk = rep_array(1, M);
      
      current_statement__ = 189;
      td_a = N;
      
      current_statement__ = 190;
      td_b = (N * J);
      
      current_statement__ = 191;
      td_c = foo_bar1(td_b, pstream__);
      td_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      td_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      td_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      td_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      td_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 5);
      
      td_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 198;
      td_int = 1;
      current_statement__ = 199;
      td_int = 1;
      current_statement__ = 208;
      for (size_t i = 1; i <= 2; ++i) {
        current_statement__ = 206;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 204;
          for (size_t m = 1; m <= 4; ++m) {
            current_statement__ = 202;
            for (size_t n = 1; n <= 5; ++n) {
              current_statement__ = 200;
              assign(td_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable td_ar_mat");
            }}}}
      current_statement__ = 219;
      for (size_t i = 1; i <= N; ++i) {
        current_statement__ = 209;
        td_simplex[(i - 1)] = (1.0 / N);
        current_statement__ = 217;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 210;
          td_1d_simplex[(n - 1)][(i - 1)] = (1.0 / N);
          current_statement__ = 215;
          for (size_t m = 1; m <= M; ++m) {
            current_statement__ = 213;
            for (size_t k = 1; k <= K; ++k) {
              current_statement__ = 211;
              td_3d_simplex[(n - 1)][(m - 1)][(k - 1)][(i - 1)] = (1.0 / N);}
          }}}
      current_statement__ = 225;
      for (size_t i = 1; i <= 4; ++i) {
        current_statement__ = 223;
        for (size_t j = 1; j <= 5; ++j) {
          Eigen::Matrix<double, -1, -1> l_mat;
          l_mat = Eigen::Matrix<double, -1, -1>(2, 3);
          
          current_statement__ = 220;
          l_mat = d_ar_mat[(i - 1)][(j - 1)];
          current_statement__ = 221;
          if (pstream__) {
            stan_print(pstream__, "ar dim1: ");
            stan_print(pstream__, i);
            stan_print(pstream__, " ar dim2: ");
            stan_print(pstream__, j);
            stan_print(pstream__, " matrix: ");
            stan_print(pstream__, l_mat);
            stan_print(pstream__, "\n");
          }}}
      current_statement__ = 226;
      td_cfcov_54 = diag_matrix(rep_vector(1, rows(td_cfcov_54)));
      current_statement__ = 227;
      td_cfcov_33 = diag_matrix(rep_vector(1, rows(td_cfcov_33)));
      {
        double z;
        
        Eigen::Matrix<double, 1, -1> blocked_tdata_vs;
        blocked_tdata_vs = Eigen::Matrix<double, 1, -1>(2);
        
        current_statement__ = 230;
        for (size_t sym1__ = 1; sym1__ <= stan::length(blocked_tdata_vs);
             ++sym1__) {
          double v;
          current_statement__ = 230;
          v = blocked_tdata_vs[(sym1__ - 1)];
          current_statement__ = 231;
          z = 0;}
      }
      current_statement__ = 233;
      td_1dk = rvalue(td_1d, cons_list(index_multi(td_1dk), nil_index_list()), "pretty printed e");
      current_statement__ = 234;
      td_simplex = td_1d_simplex[(1 - 1)];
      current_statement__ = 235;
      td_simplex = td_1d_simplex[(1 - 1)];
      current_statement__ = 236;
      td_simplex = rvalue(td_1d_simplex, cons_list(index_uni(1), cons_list(index_min_max(1, N), nil_index_list())), "pretty printed e");
      current_statement__ = 165;
      current_statement__ = 165;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 166;
      current_statement__ = 166;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 167;
      current_statement__ = 167;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 167;
      current_statement__ = 167;
      check_less_or_equal(function__, "K", K, (N * M));
      current_statement__ = 168;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 168;
        current_statement__ = 168;
        check_less_or_equal(function__, "d_int_1d_ar[sym1__]",
                            d_int_1d_ar[(sym1__ - 1)], N);}
      current_statement__ = 169;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 169;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 169;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 169;
            current_statement__ = 169;
            check_less_or_equal(function__,
                                "d_int_3d_ar[sym1__, sym2__, sym3__]",
                                d_int_3d_ar[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                N);}}}
      current_statement__ = 170;
      current_statement__ = 170;
      check_greater_or_equal(function__, "J", J, -2.);
      current_statement__ = 170;
      current_statement__ = 170;
      check_less_or_equal(function__, "J", J, 2.0);
      current_statement__ = 179;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 179;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 179;
          current_statement__ = 179;
          check_greater_or_equal(function__, "d_ar_mat[sym1__, sym2__]",
                                 d_ar_mat[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 179;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 179;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 179;
          current_statement__ = 179;
          check_less_or_equal(function__, "d_ar_mat[sym1__, sym2__]",
                              d_ar_mat[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 180;
      current_statement__ = 180;
      check_simplex(function__, "d_simplex", d_simplex);
      current_statement__ = 181;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 181;
        current_statement__ = 181;
        check_simplex(function__, "d_1d_simplex[sym1__]",
                      d_1d_simplex[(sym1__ - 1)]);}
      current_statement__ = 182;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 182;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 182;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 182;
            current_statement__ = 182;
            check_simplex(function__, "d_3d_simplex[sym1__, sym2__, sym3__]",
                          d_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }}}
      current_statement__ = 183;
      current_statement__ = 183;
      check_cholesky_factor(function__, "d_cfcov_54", d_cfcov_54);
      current_statement__ = 184;
      current_statement__ = 184;
      check_cholesky_factor(function__, "d_cfcov_33", d_cfcov_33);
      current_statement__ = 185;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 185;
        current_statement__ = 185;
        check_cholesky_factor(function__, "d_cfcov_33_ar[sym1__]",
                              d_cfcov_33_ar[(sym1__ - 1)]);}
      current_statement__ = 192;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 192;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 192;
          current_statement__ = 192;
          check_greater_or_equal(function__, "td_ar_mat[sym1__, sym2__]",
                                 td_ar_mat[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 192;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 192;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 192;
          current_statement__ = 192;
          check_less_or_equal(function__, "td_ar_mat[sym1__, sym2__]",
                              td_ar_mat[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 193;
      current_statement__ = 193;
      check_simplex(function__, "td_simplex", td_simplex);
      current_statement__ = 194;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 194;
        current_statement__ = 194;
        check_simplex(function__, "td_1d_simplex[sym1__]",
                      td_1d_simplex[(sym1__ - 1)]);}
      current_statement__ = 195;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 195;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 195;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 195;
            current_statement__ = 195;
            check_simplex(function__,
                          "td_3d_simplex[sym1__, sym2__, sym3__]",
                          td_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }}}
      current_statement__ = 196;
      current_statement__ = 196;
      check_cholesky_factor(function__, "td_cfcov_54", td_cfcov_54);
      current_statement__ = 197;
      current_statement__ = 197;
      check_cholesky_factor(function__, "td_cfcov_33", td_cfcov_33);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 5;
    num_params_r__ += N;
    num_params_r__ += N * M * K;
    num_params_r__ += N;
    num_params_r__ += N * N;
    num_params_r__ += N * M * K * N;
    num_params_r__ += N;
    num_params_r__ += N * N;
    num_params_r__ += N * M * K * N;
    num_params_r__ += 4 * 5 * 2 * 3;
    num_params_r__ += (N - 1);
    num_params_r__ += N * (N - 1);
    num_params_r__ += N * M * K * (N - 1);
    num_params_r__ += 14;
    num_params_r__ += 6;
    num_params_r__ += K * 6;
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "mother_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ p_real;
      
      current_statement__ = 2;
      p_real = in__.scalar();
      std::vector<local_scalar_t__> offset_multiplier;
      offset_multiplier = std::vector<local_scalar_t__>(5, 0);
      
      current_statement__ = 3;
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        current_statement__ = 3;
        offset_multiplier[(sym13__ - 1)] = in__.scalar();}
      current_statement__ = 3;
      for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          offset_multiplier[(sym2__ - 1)] = offset_multiplier_constrain(
          offset_multiplier[(sym2__ - 1)], 1, 2, lp__);
        } else {
          current_statement__ = 3;
          offset_multiplier[(sym2__ - 1)] = offset_multiplier_constrain(
          offset_multiplier[(sym2__ - 1)], 1, 2);
        }}
      std::vector<local_scalar_t__> p_real_1d_ar;
      p_real_1d_ar = std::vector<local_scalar_t__>(N, 0);
      
      current_statement__ = 4;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 4;
        p_real_1d_ar[(sym13__ - 1)] = in__.scalar();}
      current_statement__ = 4;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          p_real_1d_ar[(sym2__ - 1)] = lb_constrain(p_real_1d_ar[(sym2__ - 1)],
                                                    0, lp__);
        } else {
          current_statement__ = 4;
          p_real_1d_ar[(sym2__ - 1)] = lb_constrain(p_real_1d_ar[(sym2__ - 1)],
                                                    0);
        }}
      std::vector<std::vector<std::vector<local_scalar_t__>>> p_real_3d_ar;
      p_real_3d_ar = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, 0)));
      
      current_statement__ = 5;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 5;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 5;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 5;
            p_real_3d_ar[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.scalar(
            );}}}
      current_statement__ = 5;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 5;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 5;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 5;
            if (jacobian__) {
              current_statement__ = 5;
              p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = lb_constrain(
              p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)], 0, lp__);
            } else {
              current_statement__ = 5;
              p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = lb_constrain(
              p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)], 0);
            }}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> p_vec;
      p_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      current_statement__ = 6;
      p_vec = in__.vector(N);
      current_statement__ = 6;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          p_vec[(sym2__ - 1)] = lb_constrain(p_vec[(sym2__ - 1)], 0, lp__);
        } else {
          current_statement__ = 6;
          p_vec[(sym2__ - 1)] = lb_constrain(p_vec[(sym2__ - 1)], 0);
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_vec;
      p_1d_vec = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 7;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 7;
        p_1d_vec[(sym13__ - 1)] = in__.vector(N);}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_vec;
      p_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      current_statement__ = 8;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 8;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 8;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 8;
            p_3d_vec[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.vector(
            N);}}}
      Eigen::Matrix<local_scalar_t__, 1, -1> p_row_vec;
      p_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
      
      current_statement__ = 9;
      p_row_vec = in__.row_vector(N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> p_1d_row_vec;
      p_1d_row_vec = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      
      current_statement__ = 10;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 10;
        p_1d_row_vec[(sym13__ - 1)] = in__.row_vector(N);}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> p_3d_row_vec;
      p_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>(N))));
      
      current_statement__ = 11;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 11;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 11;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 11;
            p_3d_row_vec[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.row_vector(
            N);}}}
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> p_ar_mat;
      p_ar_mat = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3)));
      
      current_statement__ = 12;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 12;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 12;
          p_ar_mat[(sym13__ - 1)][(sym14__ - 1)] = in__.matrix(2, 3);}}
      current_statement__ = 12;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 12;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 12;
          for (size_t sym4__ = 1; sym4__ <= 2; ++sym4__) {
            current_statement__ = 12;
            for (size_t sym5__ = 1; sym5__ <= 3; ++sym5__) {
              current_statement__ = 12;
              if (jacobian__) {
                current_statement__ = 12;
                assign(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), lub_constrain(
                       rvalue(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"),
                       0, 1, lp__), "assigning variable p_ar_mat");
              } else {
                current_statement__ = 12;
                assign(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), lub_constrain(
                       rvalue(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"),
                       0, 1), "assigning variable p_ar_mat");
              }}}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> p_simplex;
      p_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_simplex_in__;
      p_simplex_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1));
      
      current_statement__ = 13;
      p_simplex_in__ = in__.vector((N - 1));
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        p_simplex = simplex_constrain(p_simplex_in__, lp__);
      } else {
        current_statement__ = 13;
        p_simplex = simplex_constrain(p_simplex_in__);
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_simplex;
      p_1d_simplex = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_simplex_in__;
      p_1d_simplex_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)));
      
      current_statement__ = 14;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 14;
        p_1d_simplex_in__[(sym13__ - 1)] = in__.vector((N - 1));}
      current_statement__ = 14;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 14;
        if (jacobian__) {
          current_statement__ = 14;
          p_1d_simplex[(sym2__ - 1)] = simplex_constrain(p_1d_simplex_in__[(sym2__ - 1)],
                                                         lp__);
        } else {
          current_statement__ = 14;
          p_1d_simplex[(sym2__ - 1)] = simplex_constrain(p_1d_simplex_in__[(sym2__ - 1)]);
        }}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_simplex;
      p_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_simplex_in__;
      p_3d_simplex_in__ = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)))));
      
      current_statement__ = 15;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 15;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 15;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 15;
            p_3d_simplex_in__[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.vector(
            (N - 1));}}}
      current_statement__ = 15;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 15;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 15;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 15;
            if (jacobian__) {
              current_statement__ = 15;
              p_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = simplex_constrain(
              p_3d_simplex_in__[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)],
              lp__);
            } else {
              current_statement__ = 15;
              p_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = simplex_constrain(
              p_3d_simplex_in__[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)]);
            }}}}
      Eigen::Matrix<local_scalar_t__, -1, -1> p_cfcov_54;
      p_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>(5, 4);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_cfcov_54_in__;
      p_cfcov_54_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(14);
      
      current_statement__ = 16;
      p_cfcov_54_in__ = in__.vector(14);
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        p_cfcov_54 = cholesky_factor_constrain(p_cfcov_54_in__, 5, 4, lp__);
      } else {
        current_statement__ = 16;
        p_cfcov_54 = cholesky_factor_constrain(p_cfcov_54_in__, 5, 4);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> p_cfcov_33;
      p_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_cfcov_33_in__;
      p_cfcov_33_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
      
      current_statement__ = 17;
      p_cfcov_33_in__ = in__.vector(6);
      current_statement__ = 17;
      if (jacobian__) {
        current_statement__ = 17;
        p_cfcov_33 = cholesky_factor_constrain(p_cfcov_33_in__, 3, 3, lp__);
      } else {
        current_statement__ = 17;
        p_cfcov_33 = cholesky_factor_constrain(p_cfcov_33_in__, 3, 3);
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> p_cfcov_33_ar;
      p_cfcov_33_ar = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_cfcov_33_ar_in__;
      p_cfcov_33_ar_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(6));
      
      current_statement__ = 18;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 18;
        p_cfcov_33_ar_in__[(sym13__ - 1)] = in__.vector(6);}
      current_statement__ = 18;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 18;
        if (jacobian__) {
          current_statement__ = 18;
          p_cfcov_33_ar[(sym2__ - 1)] = cholesky_factor_constrain(p_cfcov_33_ar_in__[(sym2__ - 1)],
                                                                  3, 3, lp__);
        } else {
          current_statement__ = 18;
          p_cfcov_33_ar[(sym2__ - 1)] = cholesky_factor_constrain(p_cfcov_33_ar_in__[(sym2__ - 1)],
                                                                  3, 3);
        }}
      std::vector<local_scalar_t__> tp_real_1d_ar;
      tp_real_1d_ar = std::vector<local_scalar_t__>(N, 0);
      
      std::vector<std::vector<std::vector<local_scalar_t__>>> tp_real_3d_ar;
      tp_real_3d_ar = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, 0)));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_vec;
      tp_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_1d_vec;
      tp_1d_vec = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tp_3d_vec;
      tp_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      Eigen::Matrix<local_scalar_t__, 1, -1> tp_row_vec;
      tp_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
      
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tp_1d_row_vec;
      tp_1d_row_vec = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> tp_3d_row_vec;
      tp_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>(N))));
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> tp_ar_mat;
      tp_ar_mat = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3)));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_simplex;
      tp_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_1d_simplex;
      tp_1d_simplex = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tp_3d_simplex;
      tp_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_cfcov_54;
      tp_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>(5, 4);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_cfcov_33;
      tp_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> tp_cfcov_33_ar;
      tp_cfcov_33_ar = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3));
      
      current_statement__ = 34;
      tp_real_1d_ar = p_real_1d_ar;
      current_statement__ = 35;
      tp_real_3d_ar = p_real_3d_ar;
      current_statement__ = 36;
      tp_1d_vec = p_1d_vec;
      current_statement__ = 37;
      tp_3d_vec = p_3d_vec;
      current_statement__ = 38;
      tp_simplex = p_simplex;
      current_statement__ = 39;
      tp_1d_simplex = p_1d_simplex;
      current_statement__ = 40;
      tp_3d_simplex = p_3d_simplex;
      current_statement__ = 41;
      tp_cfcov_54 = p_cfcov_54;
      current_statement__ = 42;
      tp_cfcov_33 = p_cfcov_33;
      current_statement__ = 43;
      tp_cfcov_33_ar = p_cfcov_33_ar;
      current_statement__ = 52;
      for (size_t i = 1; i <= 2; ++i) {
        current_statement__ = 50;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 48;
          for (size_t m = 1; m <= 4; ++m) {
            current_statement__ = 46;
            for (size_t n = 1; n <= 5; ++n) {
              current_statement__ = 44;
              assign(tp_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable tp_ar_mat");
            }}}}
      current_statement__ = 54;
      for (size_t i = 1; i <= N; ++i) {
        current_statement__ = 53;
        tp_vec[(i - 1)] = (-1. * p_vec[(i - 1)]);}
      current_statement__ = 55;
      tp_row_vec = transpose(tp_1d_vec[(1 - 1)]);
      current_statement__ = 56;
      tp_1d_row_vec = p_1d_row_vec;
      current_statement__ = 57;
      tp_3d_row_vec = p_3d_row_vec;
      current_statement__ = 19;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "tp_real_1d_ar[sym2__]",
                               tp_real_1d_ar[(sym2__ - 1)], 0);}
      current_statement__ = 20;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 20;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 20;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 20;
            current_statement__ = 20;
            check_greater_or_equal(function__,
                                   "tp_real_3d_ar[sym2__, sym3__, sym4__]",
                                   tp_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)],
                                   0);}}}
      current_statement__ = 21;
      current_statement__ = 21;
      check_less_or_equal(function__, "tp_vec", tp_vec, 0);
      current_statement__ = 27;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 27;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 27;
          current_statement__ = 27;
          check_greater_or_equal(function__, "tp_ar_mat[sym2__, sym3__]",
                                 tp_ar_mat[(sym2__ - 1)][(sym3__ - 1)], 0);}}
      current_statement__ = 27;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 27;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 27;
          current_statement__ = 27;
          check_less_or_equal(function__, "tp_ar_mat[sym2__, sym3__]",
                              tp_ar_mat[(sym2__ - 1)][(sym3__ - 1)], 1);}}
      current_statement__ = 28;
      current_statement__ = 28;
      check_simplex(function__, "tp_simplex", tp_simplex);
      current_statement__ = 29;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_simplex(function__, "tp_1d_simplex[sym2__]",
                      tp_1d_simplex[(sym2__ - 1)]);}
      current_statement__ = 30;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 30;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 30;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 30;
            current_statement__ = 30;
            check_simplex(function__,
                          "tp_3d_simplex[sym2__, sym3__, sym4__]",
                          tp_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)]);
          }}}
      current_statement__ = 31;
      current_statement__ = 31;
      check_cholesky_factor(function__, "tp_cfcov_54", tp_cfcov_54);
      current_statement__ = 32;
      current_statement__ = 32;
      check_cholesky_factor(function__, "tp_cfcov_33", tp_cfcov_33);
      current_statement__ = 33;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_cholesky_factor(function__, "tp_cfcov_33_ar[sym2__]",
                              tp_cfcov_33_ar[(sym2__ - 1)]);}
      {
        local_scalar_t__ r1;
        
        current_statement__ = 134;
        r1 = foo_bar1(p_real, pstream__);
        local_scalar_t__ r2;
        
        current_statement__ = 135;
        r2 = foo_bar1(J, pstream__);
        current_statement__ = 136;
        lp_accum__.add(normal_log<propto__>(p_real, 0, 1));
        current_statement__ = 137;
        lp_accum__.add(normal_log<propto__>(offset_multiplier, 0, 1));
        current_statement__ = 138;
        lp_accum__.add(normal_log<propto__>(to_vector(p_real_1d_ar), 0, 1));
        current_statement__ = 151;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 139;
          lp_accum__.add(normal_log<propto__>(to_vector(p_1d_vec[(n - 1)]),
                                              0, 1));
          current_statement__ = 140;
          lp_accum__.add(normal_log<propto__>(to_vector(p_1d_row_vec[(n - 1)]),
                                              0, 1));
          current_statement__ = 141;
          lp_accum__.add(normal_log<propto__>(to_vector(p_1d_simplex[(n - 1)]),
                                              0, 1));
          current_statement__ = 149;
          for (size_t m = 1; m <= M; ++m) {
            current_statement__ = 147;
            for (size_t k = 1; k <= K; ++k) {
              current_statement__ = 142;
              lp_accum__.add(normal_log<propto__>(to_vector(p_3d_vec[(n - 1)][(m - 1)][(k - 1)]),
                                                  0, 1));
              current_statement__ = 143;
              lp_accum__.add(normal_log<propto__>(to_vector(p_3d_row_vec[(n - 1)][(m - 1)][(k - 1)]),
                                                  0, 1));
              current_statement__ = 144;
              lp_accum__.add(normal_log<propto__>(to_vector(p_3d_simplex[(n - 1)][(m - 1)][(k - 1)]),
                                                  0, 1));
              current_statement__ = 145;
              lp_accum__.add(normal_log<propto__>(p_real_3d_ar[(n - 1)][(m - 1)][(k - 1)],
                                                  0, 1));}}}
        current_statement__ = 156;
        for (size_t i = 1; i <= 4; ++i) {
          current_statement__ = 154;
          for (size_t j = 1; j <= 5; ++j) {
            current_statement__ = 152;
            lp_accum__.add(normal_log<propto__>(to_vector(p_ar_mat[(i - 1)][(j - 1)]),
                                                0, 1));}}
        current_statement__ = 159;
        for (size_t k = 1; k <= K; ++k) {
          current_statement__ = 157;
          lp_accum__.add(normal_log<propto__>(to_vector(p_cfcov_33_ar[(k - 1)]),
                                              0, 1));}
        current_statement__ = 160;
        lp_accum__.add(normal_log<propto__>(to_vector(p_vec), 0, 1));
        current_statement__ = 161;
        lp_accum__.add(normal_log<propto__>(to_vector(p_row_vec), 0, 1));
        current_statement__ = 162;
        lp_accum__.add(normal_log<propto__>(to_vector(p_simplex), 0, 1));
        current_statement__ = 163;
        lp_accum__.add(normal_log<propto__>(to_vector(p_cfcov_54), 0, 1));
        current_statement__ = 164;
        lp_accum__.add(normal_log<propto__>(to_vector(p_cfcov_33), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "mother_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double p_real;
      
      current_statement__ = 2;
      p_real = in__.scalar();
      std::vector<double> offset_multiplier;
      offset_multiplier = std::vector<double>(5, 0);
      
      current_statement__ = 3;
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        current_statement__ = 3;
        offset_multiplier[(sym13__ - 1)] = in__.scalar();}
      current_statement__ = 3;
      for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
        current_statement__ = 3;
        offset_multiplier[(sym2__ - 1)] = offset_multiplier_constrain(
        offset_multiplier[(sym2__ - 1)], 1, 2);}
      std::vector<double> p_real_1d_ar;
      p_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 4;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 4;
        p_real_1d_ar[(sym13__ - 1)] = in__.scalar();}
      current_statement__ = 4;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 4;
        p_real_1d_ar[(sym2__ - 1)] = lb_constrain(p_real_1d_ar[(sym2__ - 1)],
                                                  0);}
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar;
      p_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 5;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 5;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 5;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 5;
            p_real_3d_ar[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.scalar(
            );}}}
      current_statement__ = 5;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 5;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 5;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 5;
            p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = lb_constrain(
            p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)], 0);}}}
      Eigen::Matrix<double, -1, 1> p_vec;
      p_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 6;
      p_vec = in__.vector(N);
      current_statement__ = 6;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 6;
        p_vec[(sym2__ - 1)] = lb_constrain(p_vec[(sym2__ - 1)], 0);}
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_vec;
      p_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 7;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 7;
        p_1d_vec[(sym13__ - 1)] = in__.vector(N);}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_vec;
      p_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 8;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 8;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 8;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 8;
            p_3d_vec[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.vector(
            N);}}}
      Eigen::Matrix<double, 1, -1> p_row_vec;
      p_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 9;
      p_row_vec = in__.row_vector(N);
      std::vector<Eigen::Matrix<double, 1, -1>> p_1d_row_vec;
      p_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 10;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 10;
        p_1d_row_vec[(sym13__ - 1)] = in__.row_vector(N);}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> p_3d_row_vec;
      p_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 11;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 11;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 11;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 11;
            p_3d_row_vec[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.row_vector(
            N);}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat;
      p_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 12;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 12;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 12;
          p_ar_mat[(sym13__ - 1)][(sym14__ - 1)] = in__.matrix(2, 3);}}
      current_statement__ = 12;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 12;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 12;
          for (size_t sym4__ = 1; sym4__ <= 2; ++sym4__) {
            current_statement__ = 12;
            for (size_t sym5__ = 1; sym5__ <= 3; ++sym5__) {
              current_statement__ = 12;
              assign(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), lub_constrain(
                     rvalue(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"),
                     0, 1), "assigning variable p_ar_mat");}}}}
      Eigen::Matrix<double, -1, 1> p_simplex;
      p_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_simplex_in__;
      p_simplex_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1));
      
      current_statement__ = 13;
      p_simplex_in__ = in__.vector((N - 1));
      current_statement__ = 13;
      p_simplex = simplex_constrain(p_simplex_in__);
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex;
      p_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_simplex_in__;
      p_1d_simplex_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)));
      
      current_statement__ = 14;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 14;
        p_1d_simplex_in__[(sym13__ - 1)] = in__.vector((N - 1));}
      current_statement__ = 14;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 14;
        p_1d_simplex[(sym2__ - 1)] = simplex_constrain(p_1d_simplex_in__[(sym2__ - 1)]);
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex;
      p_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_simplex_in__;
      p_3d_simplex_in__ = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)))));
      
      current_statement__ = 15;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 15;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 15;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 15;
            p_3d_simplex_in__[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)] = in__.vector(
            (N - 1));}}}
      current_statement__ = 15;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 15;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 15;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 15;
            p_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = simplex_constrain(
            p_3d_simplex_in__[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)]);}}}
      Eigen::Matrix<double, -1, -1> p_cfcov_54;
      p_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_cfcov_54_in__;
      p_cfcov_54_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(14);
      
      current_statement__ = 16;
      p_cfcov_54_in__ = in__.vector(14);
      current_statement__ = 16;
      p_cfcov_54 = cholesky_factor_constrain(p_cfcov_54_in__, 5, 4);
      Eigen::Matrix<double, -1, -1> p_cfcov_33;
      p_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_cfcov_33_in__;
      p_cfcov_33_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
      
      current_statement__ = 17;
      p_cfcov_33_in__ = in__.vector(6);
      current_statement__ = 17;
      p_cfcov_33 = cholesky_factor_constrain(p_cfcov_33_in__, 3, 3);
      std::vector<Eigen::Matrix<double, -1, -1>> p_cfcov_33_ar;
      p_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_cfcov_33_ar_in__;
      p_cfcov_33_ar_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(6));
      
      current_statement__ = 18;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 18;
        p_cfcov_33_ar_in__[(sym13__ - 1)] = in__.vector(6);}
      current_statement__ = 18;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 18;
        p_cfcov_33_ar[(sym2__ - 1)] = cholesky_factor_constrain(p_cfcov_33_ar_in__[(sym2__ - 1)],
                                                                3, 3);}
      std::vector<double> tp_real_1d_ar;
      tp_real_1d_ar = std::vector<double>(N, 0);
      
      std::vector<std::vector<std::vector<double>>> tp_real_3d_ar;
      tp_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      Eigen::Matrix<double, -1, 1> tp_vec;
      tp_vec = Eigen::Matrix<double, -1, 1>(N);
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_1d_vec;
      tp_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> tp_3d_vec;
      tp_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      Eigen::Matrix<double, 1, -1> tp_row_vec;
      tp_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      std::vector<Eigen::Matrix<double, 1, -1>> tp_1d_row_vec;
      tp_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> tp_3d_row_vec;
      tp_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tp_ar_mat;
      tp_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      Eigen::Matrix<double, -1, 1> tp_simplex;
      tp_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_1d_simplex;
      tp_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> tp_3d_simplex;
      tp_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      Eigen::Matrix<double, -1, -1> tp_cfcov_54;
      tp_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      Eigen::Matrix<double, -1, -1> tp_cfcov_33;
      tp_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      std::vector<Eigen::Matrix<double, -1, -1>> tp_cfcov_33_ar;
      tp_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      vars__.push_back(p_real);
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        vars__.push_back(offset_multiplier[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_real_1d_ar[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            vars__.push_back(p_real_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
          }}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(p_1d_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(p_3d_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_row_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(p_1d_row_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(p_3d_row_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
              vars__.push_back(rvalue(p_ar_mat, cons_list(index_uni(sym16__), cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_simplex[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(p_1d_simplex[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(p_3d_simplex[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          vars__.push_back(rvalue(p_cfcov_54, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          vars__.push_back(rvalue(p_cfcov_33, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            vars__.push_back(rvalue(p_cfcov_33_ar, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) || primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 34;
      tp_real_1d_ar = p_real_1d_ar;
      current_statement__ = 35;
      tp_real_3d_ar = p_real_3d_ar;
      current_statement__ = 36;
      tp_1d_vec = p_1d_vec;
      current_statement__ = 37;
      tp_3d_vec = p_3d_vec;
      current_statement__ = 38;
      tp_simplex = p_simplex;
      current_statement__ = 39;
      tp_1d_simplex = p_1d_simplex;
      current_statement__ = 40;
      tp_3d_simplex = p_3d_simplex;
      current_statement__ = 41;
      tp_cfcov_54 = p_cfcov_54;
      current_statement__ = 42;
      tp_cfcov_33 = p_cfcov_33;
      current_statement__ = 43;
      tp_cfcov_33_ar = p_cfcov_33_ar;
      current_statement__ = 52;
      for (size_t i = 1; i <= 2; ++i) {
        current_statement__ = 50;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 48;
          for (size_t m = 1; m <= 4; ++m) {
            current_statement__ = 46;
            for (size_t n = 1; n <= 5; ++n) {
              current_statement__ = 44;
              assign(tp_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable tp_ar_mat");
            }}}}
      current_statement__ = 54;
      for (size_t i = 1; i <= N; ++i) {
        current_statement__ = 53;
        tp_vec[(i - 1)] = (-1. * p_vec[(i - 1)]);}
      current_statement__ = 55;
      tp_row_vec = transpose(tp_1d_vec[(1 - 1)]);
      current_statement__ = 56;
      tp_1d_row_vec = p_1d_row_vec;
      current_statement__ = 57;
      tp_3d_row_vec = p_3d_row_vec;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(tp_real_1d_ar[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            vars__.push_back(tp_real_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
          }}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(tp_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(tp_1d_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(tp_3d_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(tp_row_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(tp_1d_row_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(tp_3d_row_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
              vars__.push_back(rvalue(tp_ar_mat, cons_list(index_uni(sym16__), cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(tp_simplex[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(tp_1d_simplex[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(tp_3d_simplex[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          vars__.push_back(rvalue(tp_cfcov_54, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          vars__.push_back(rvalue(tp_cfcov_33, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            vars__.push_back(rvalue(tp_cfcov_33_ar, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double gq_r1;
      
      current_statement__ = 58;
      gq_r1 = foo_bar1(p_real, pstream__);
      double gq_r2;
      
      current_statement__ = 59;
      gq_r2 = foo_bar1(J, pstream__);
      std::vector<double> gq_real_1d_ar;
      gq_real_1d_ar = std::vector<double>(N, 0);
      
      std::vector<std::vector<std::vector<double>>> gq_real_3d_ar;
      gq_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      Eigen::Matrix<double, -1, 1> gq_vec;
      gq_vec = Eigen::Matrix<double, -1, 1>(N);
      
      std::vector<Eigen::Matrix<double, -1, 1>> gq_1d_vec;
      gq_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> gq_3d_vec;
      gq_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      Eigen::Matrix<double, 1, -1> gq_row_vec;
      gq_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      std::vector<Eigen::Matrix<double, 1, -1>> gq_1d_row_vec;
      gq_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> gq_3d_row_vec;
      gq_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> gq_ar_mat;
      gq_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      Eigen::Matrix<double, -1, 1> gq_simplex;
      gq_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      std::vector<Eigen::Matrix<double, -1, 1>> gq_1d_simplex;
      gq_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> gq_3d_simplex;
      gq_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      Eigen::Matrix<double, -1, -1> gq_cfcov_54;
      gq_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      Eigen::Matrix<double, -1, -1> gq_cfcov_33;
      gq_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      std::vector<Eigen::Matrix<double, -1, -1>> gq_cfcov_33_ar;
      gq_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      std::vector<int> indices;
      indices = std::vector<int>(3, 0);
      
      current_statement__ = 75;
      indices = {2, 3, 1};
      std::vector<Eigen::Matrix<double, -1, -1>> indexing_mat;
      indexing_mat = std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(3, 4));
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res1;
      idx_res1 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>(3, 4));
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res2;
      idx_res2 = std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(3, 4));
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res3;
      idx_res3 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>(3, 3));
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res11;
      idx_res11 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>(3, 4));
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res21;
      idx_res21 = std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(3, 4));
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res31;
      idx_res31 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>(3, 3));
      
      std::vector<Eigen::Matrix<double, 1, -1>> idx_res4;
      idx_res4 = std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>(4));
      
      std::vector<Eigen::Matrix<double, -1, 1>> idx_res5;
      idx_res5 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(2));
      
      current_statement__ = 85;
      gq_real_1d_ar = rvalue(p_1d_simplex, cons_list(index_omni(), cons_list(index_uni(1), nil_index_list())), "pretty printed e");
      current_statement__ = 86;
      gq_real_3d_ar = p_real_3d_ar;
      current_statement__ = 87;
      gq_1d_vec = p_1d_vec;
      current_statement__ = 88;
      gq_3d_vec = p_3d_vec;
      current_statement__ = 89;
      gq_row_vec = p_row_vec;
      current_statement__ = 90;
      gq_1d_row_vec = p_1d_row_vec;
      current_statement__ = 91;
      gq_3d_row_vec = p_3d_row_vec;
      current_statement__ = 92;
      gq_simplex = rvalue(p_1d_simplex, cons_list(index_uni(1), cons_list(index_min_max(1, N), nil_index_list())), "pretty printed e");
      current_statement__ = 93;
      gq_1d_simplex = p_1d_simplex;
      current_statement__ = 94;
      gq_3d_simplex = p_3d_simplex;
      current_statement__ = 95;
      gq_cfcov_54 = p_cfcov_54;
      current_statement__ = 96;
      gq_cfcov_33 = p_cfcov_33;
      current_statement__ = 97;
      gq_cfcov_33_ar = p_cfcov_33_ar;
      current_statement__ = 106;
      for (size_t i = 1; i <= 2; ++i) {
        current_statement__ = 104;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 102;
          for (size_t m = 1; m <= 4; ++m) {
            current_statement__ = 100;
            for (size_t n = 1; n <= 5; ++n) {
              current_statement__ = 98;
              assign(gq_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable gq_ar_mat");
            }}}}
      current_statement__ = 108;
      for (size_t i = 1; i <= N; ++i) {
        current_statement__ = 107;
        gq_vec[(i - 1)] = (-1. * p_vec[(i - 1)]);}
      current_statement__ = 112;
      for (size_t i = 1; i <= 3; ++i) {
        current_statement__ = 111;
        for (size_t j = 1; j <= 4; ++j) {
          current_statement__ = 110;
          for (size_t k = 1; k <= 5; ++k) {
            current_statement__ = 109;
            assign(indexing_mat, cons_list(index_uni(k), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list()))), normal_rng(
                   0, 1, base_rng__), "assigning variable indexing_mat");}}}
      current_statement__ = 115;
      for (size_t i = 1; i <= size(indices); ++i) {
        current_statement__ = 114;
        for (size_t j = 1; j <= size(indices); ++j) {
          current_statement__ = 113;
          assign(idx_res1, cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())), rvalue(indexing_mat, cons_list(index_uni(indices[(i - 1)]), cons_list(index_uni(indices[(j - 1)]), nil_index_list())), "pretty printed e"), "assigning variable idx_res1");
        }}
      current_statement__ = 116;
      idx_res11 = rvalue(indexing_mat, cons_list(index_multi(indices), cons_list(index_multi(indices), nil_index_list())), "pretty printed e");
      current_statement__ = 118;
      if (logical_neq(rvalue(indexing_mat, cons_list(index_uni(indices[(2 - 1)]), cons_list(index_uni(indices[(1 - 1)]), nil_index_list())), "pretty printed e")[(1 - 1)], rvalue(idx_res1, cons_list(index_uni(2), cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list()))), "pretty printed e"))) {
        current_statement__ = 117;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "indexing test 1 failed";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 121;
      for (size_t i = 1; i <= 5; ++i) {
        current_statement__ = 120;
        for (size_t j = 1; j <= size(indices); ++j) {
          current_statement__ = 119;
          assign(idx_res2, cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())), rvalue(indexing_mat, cons_list(index_uni(i), cons_list(index_uni(indices[(j - 1)]), nil_index_list())), "pretty printed e"), "assigning variable idx_res2");
        }}
      current_statement__ = 122;
      idx_res21 = rvalue(indexing_mat, cons_list(index_omni(), cons_list(index_multi(indices), nil_index_list())), "pretty printed e");
      current_statement__ = 124;
      if (logical_neq(rvalue(indexing_mat, cons_list(index_uni(2), cons_list(index_uni(indices[(1 - 1)]), nil_index_list())), "pretty printed e")[(1 - 1)], rvalue(idx_res2, cons_list(index_uni(2), cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list()))), "pretty printed e"))) {
        current_statement__ = 123;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "indexing test 2 failed";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 128;
      for (size_t i = 1; i <= size(indices); ++i) {
        current_statement__ = 127;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 126;
          for (size_t k = 1; k <= size(indices); ++k) {
            current_statement__ = 125;
            assign(idx_res3, cons_list(index_uni(i), cons_list(index_uni(j), cons_list(index_uni(k), nil_index_list()))), rvalue(indexing_mat, cons_list(index_uni(indices[(i - 1)]), cons_list(index_uni(j), cons_list(index_uni(indices[(k - 1)]), nil_index_list()))), "pretty printed e"), "assigning variable idx_res3");
          }}}
      current_statement__ = 129;
      idx_res31 = rvalue(indexing_mat, cons_list(index_multi(indices), cons_list(index_omni(), cons_list(index_multi(indices), nil_index_list()))), "pretty printed e");
      current_statement__ = 131;
      if (logical_neq(rvalue(indexing_mat, cons_list(index_uni(indices[(2 - 1)]), cons_list(index_uni(1), cons_list(index_uni(indices[(1 - 1)]), nil_index_list()))), "pretty printed e"), rvalue(idx_res3, cons_list(index_uni(2), cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list()))), "pretty printed e"))) {
        current_statement__ = 130;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "indexing test 3 failed";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 132;
      idx_res4 = rvalue(indexing_mat, cons_list(index_min_max(1, 3), cons_list(index_uni(1), nil_index_list())), "pretty printed e");
      current_statement__ = 133;
      idx_res5 = rvalue(indexing_mat, cons_list(index_min(4), cons_list(index_min_max(2, 3), cons_list(index_uni(1), nil_index_list()))), "pretty printed e");
      current_statement__ = 60;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 60;
        current_statement__ = 60;
        check_greater_or_equal(function__, "gq_real_1d_ar[sym2__]",
                               gq_real_1d_ar[(sym2__ - 1)], 0);}
      current_statement__ = 61;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 61;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 61;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 61;
            current_statement__ = 61;
            check_greater_or_equal(function__,
                                   "gq_real_3d_ar[sym2__, sym3__, sym4__]",
                                   gq_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)],
                                   0);}}}
      current_statement__ = 62;
      current_statement__ = 62;
      check_less_or_equal(function__, "gq_vec", gq_vec, 1);
      current_statement__ = 68;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 68;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 68;
          current_statement__ = 68;
          check_greater_or_equal(function__, "gq_ar_mat[sym2__, sym3__]",
                                 gq_ar_mat[(sym2__ - 1)][(sym3__ - 1)], 0);}}
      current_statement__ = 68;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 68;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 68;
          current_statement__ = 68;
          check_less_or_equal(function__, "gq_ar_mat[sym2__, sym3__]",
                              gq_ar_mat[(sym2__ - 1)][(sym3__ - 1)], 1);}}
      current_statement__ = 69;
      current_statement__ = 69;
      check_simplex(function__, "gq_simplex", gq_simplex);
      current_statement__ = 70;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 70;
        current_statement__ = 70;
        check_simplex(function__, "gq_1d_simplex[sym2__]",
                      gq_1d_simplex[(sym2__ - 1)]);}
      current_statement__ = 71;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 71;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 71;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 71;
            current_statement__ = 71;
            check_simplex(function__,
                          "gq_3d_simplex[sym2__, sym3__, sym4__]",
                          gq_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)]);
          }}}
      current_statement__ = 72;
      current_statement__ = 72;
      check_cholesky_factor(function__, "gq_cfcov_54", gq_cfcov_54);
      current_statement__ = 73;
      current_statement__ = 73;
      check_cholesky_factor(function__, "gq_cfcov_33", gq_cfcov_33);
      current_statement__ = 74;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 74;
        current_statement__ = 74;
        check_cholesky_factor(function__, "gq_cfcov_33_ar[sym2__]",
                              gq_cfcov_33_ar[(sym2__ - 1)]);}
      vars__.push_back(gq_r1);
      vars__.push_back(gq_r2);
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(gq_real_1d_ar[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            vars__.push_back(gq_real_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
          }}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(gq_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(gq_1d_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(gq_3d_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(gq_row_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(gq_1d_row_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(gq_3d_row_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
              vars__.push_back(rvalue(gq_ar_mat, cons_list(index_uni(sym16__), cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(gq_simplex[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(gq_1d_simplex[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(gq_3d_simplex[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          vars__.push_back(rvalue(gq_cfcov_54, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          vars__.push_back(rvalue(gq_cfcov_33, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            vars__.push_back(rvalue(gq_cfcov_33_ar, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        vars__.push_back(indices[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            vars__.push_back(rvalue(indexing_mat, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
            vars__.push_back(rvalue(idx_res1, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            vars__.push_back(rvalue(idx_res2, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
            vars__.push_back(rvalue(idx_res3, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
            vars__.push_back(rvalue(idx_res11, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            vars__.push_back(rvalue(idx_res21, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
            vars__.push_back(rvalue(idx_res31, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          vars__.push_back(idx_res4[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= 2; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          vars__.push_back(idx_res5[(sym14__ - 1)][(sym13__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double p_real;
      
      current_statement__ = 2;
      pos__ = 1;
      current_statement__ = 2;
      p_real = context__.vals_r("p_real")[(pos__ - 1)];
      std::vector<double> offset_multiplier;
      offset_multiplier = std::vector<double>(5, 0);
      
      current_statement__ = 3;
      pos__ = 1;
      current_statement__ = 3;
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        current_statement__ = 3;
        offset_multiplier[(sym13__ - 1)] = context__.vals_r("offset_multiplier")[(pos__ - 1)];
        current_statement__ = 3;
        pos__ = (pos__ + 1);}
      current_statement__ = 3;
      for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
        current_statement__ = 3;
        offset_multiplier[(sym2__ - 1)] = offset_multiplier_free(offset_multiplier[(sym2__ - 1)],
                                                                 1, 2);}
      std::vector<double> p_real_1d_ar;
      p_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 4;
        p_real_1d_ar[(sym13__ - 1)] = context__.vals_r("p_real_1d_ar")[(pos__ - 1)];
        current_statement__ = 4;
        pos__ = (pos__ + 1);}
      current_statement__ = 4;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 4;
        p_real_1d_ar[(sym2__ - 1)] = lb_free(p_real_1d_ar[(sym2__ - 1)], 0);}
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar;
      p_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 5;
      pos__ = 1;
      current_statement__ = 5;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 5;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 5;
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            current_statement__ = 5;
            p_real_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_real_3d_ar")[(pos__ - 1)];
            current_statement__ = 5;
            pos__ = (pos__ + 1);}}}
      current_statement__ = 5;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 5;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 5;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 5;
            p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = lb_free(
            p_real_3d_ar[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)], 0);}}}
      Eigen::Matrix<double, -1, 1> p_vec;
      p_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 6;
      pos__ = 1;
      current_statement__ = 6;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 6;
        p_vec[(sym13__ - 1)] = context__.vals_r("p_vec")[(pos__ - 1)];
        current_statement__ = 6;
        pos__ = (pos__ + 1);}
      current_statement__ = 6;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 6;
        p_vec[(sym2__ - 1)] = lb_free(p_vec[(sym2__ - 1)], 0);}
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_vec;
      p_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 7;
      pos__ = 1;
      current_statement__ = 7;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 7;
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          current_statement__ = 7;
          p_1d_vec[(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_1d_vec")[(pos__ - 1)];
          current_statement__ = 7;
          pos__ = (pos__ + 1);}}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_vec;
      p_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 8;
      pos__ = 1;
      current_statement__ = 8;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 8;
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          current_statement__ = 8;
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            current_statement__ = 8;
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              current_statement__ = 8;
              p_3d_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_3d_vec")[(pos__ - 1)];
              current_statement__ = 8;
              pos__ = (pos__ + 1);}}}}
      Eigen::Matrix<double, 1, -1> p_row_vec;
      p_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 9;
      pos__ = 1;
      current_statement__ = 9;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 9;
        p_row_vec[(sym13__ - 1)] = context__.vals_r("p_row_vec")[(pos__ - 1)];
        current_statement__ = 9;
        pos__ = (pos__ + 1);}
      std::vector<Eigen::Matrix<double, 1, -1>> p_1d_row_vec;
      p_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 10;
      pos__ = 1;
      current_statement__ = 10;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 10;
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          current_statement__ = 10;
          p_1d_row_vec[(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_1d_row_vec")[(pos__ - 1)];
          current_statement__ = 10;
          pos__ = (pos__ + 1);}}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> p_3d_row_vec;
      p_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 11;
      pos__ = 1;
      current_statement__ = 11;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 11;
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          current_statement__ = 11;
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            current_statement__ = 11;
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              current_statement__ = 11;
              p_3d_row_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_3d_row_vec")[(pos__ - 1)];
              current_statement__ = 11;
              pos__ = (pos__ + 1);}}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat;
      p_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 12;
      pos__ = 1;
      current_statement__ = 12;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 12;
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          current_statement__ = 12;
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            current_statement__ = 12;
            for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
              current_statement__ = 12;
              assign(p_ar_mat, cons_list(index_uni(sym16__), cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())))), context__.vals_r("p_ar_mat")[(pos__ - 1)], "assigning variable p_ar_mat");
              current_statement__ = 12;
              pos__ = (pos__ + 1);}}}}
      current_statement__ = 12;
      for (size_t sym2__ = 1; sym2__ <= 4; ++sym2__) {
        current_statement__ = 12;
        for (size_t sym3__ = 1; sym3__ <= 5; ++sym3__) {
          current_statement__ = 12;
          for (size_t sym4__ = 1; sym4__ <= 2; ++sym4__) {
            current_statement__ = 12;
            for (size_t sym5__ = 1; sym5__ <= 3; ++sym5__) {
              current_statement__ = 12;
              assign(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), lub_free(
                     rvalue(p_ar_mat, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"),
                     0, 1), "assigning variable p_ar_mat");}}}}
      Eigen::Matrix<double, -1, 1> p_simplex;
      p_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 13;
      pos__ = 1;
      current_statement__ = 13;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 13;
        p_simplex[(sym13__ - 1)] = context__.vals_r("p_simplex")[(pos__ - 1)];
        current_statement__ = 13;
        pos__ = (pos__ + 1);}
      current_statement__ = 13;
      p_simplex = simplex_free(p_simplex);
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex;
      p_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 14;
      pos__ = 1;
      current_statement__ = 14;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 14;
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          current_statement__ = 14;
          p_1d_simplex[(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_1d_simplex")[(pos__ - 1)];
          current_statement__ = 14;
          pos__ = (pos__ + 1);}}
      current_statement__ = 14;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 14;
        p_1d_simplex[(sym2__ - 1)] = simplex_free(p_1d_simplex[(sym2__ - 1)]);
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex;
      p_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 15;
      pos__ = 1;
      current_statement__ = 15;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 15;
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          current_statement__ = 15;
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            current_statement__ = 15;
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              current_statement__ = 15;
              p_3d_simplex[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)] = context__.vals_r("p_3d_simplex")[(pos__ - 1)];
              current_statement__ = 15;
              pos__ = (pos__ + 1);}}}}
      current_statement__ = 15;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 15;
        for (size_t sym3__ = 1; sym3__ <= M; ++sym3__) {
          current_statement__ = 15;
          for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
            current_statement__ = 15;
            p_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)] = simplex_free(
            p_3d_simplex[(sym2__ - 1)][(sym3__ - 1)][(sym4__ - 1)]);}}}
      Eigen::Matrix<double, -1, -1> p_cfcov_54;
      p_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 16;
      pos__ = 1;
      current_statement__ = 16;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 16;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 16;
          assign(p_cfcov_54, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), context__.vals_r("p_cfcov_54")[(pos__ - 1)], "assigning variable p_cfcov_54");
          current_statement__ = 16;
          pos__ = (pos__ + 1);}}
      current_statement__ = 16;
      p_cfcov_54 = cholesky_factor_free(p_cfcov_54);
      Eigen::Matrix<double, -1, -1> p_cfcov_33;
      p_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 17;
      pos__ = 1;
      current_statement__ = 17;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 17;
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          current_statement__ = 17;
          assign(p_cfcov_33, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), context__.vals_r("p_cfcov_33")[(pos__ - 1)], "assigning variable p_cfcov_33");
          current_statement__ = 17;
          pos__ = (pos__ + 1);}}
      current_statement__ = 17;
      p_cfcov_33 = cholesky_factor_free(p_cfcov_33);
      std::vector<Eigen::Matrix<double, -1, -1>> p_cfcov_33_ar;
      p_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 18;
      pos__ = 1;
      current_statement__ = 18;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 18;
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          current_statement__ = 18;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 18;
            assign(p_cfcov_33_ar, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), context__.vals_r("p_cfcov_33_ar")[(pos__ - 1)], "assigning variable p_cfcov_33_ar");
            current_statement__ = 18;
            pos__ = (pos__ + 1);}}}
      current_statement__ = 18;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 18;
        p_cfcov_33_ar[(sym2__ - 1)] = cholesky_factor_free(p_cfcov_33_ar[(sym2__ - 1)]);
      }
      vars__.push_back(p_real);
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        vars__.push_back(offset_multiplier[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_real_1d_ar[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
            vars__.push_back(p_real_3d_ar[(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
          }}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(p_1d_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(p_3d_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_row_vec[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(p_1d_row_vec[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(p_3d_row_vec[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
              vars__.push_back(rvalue(p_ar_mat, cons_list(index_uni(sym16__), cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(p_simplex[(sym13__ - 1)]);}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          vars__.push_back(p_1d_simplex[(sym14__ - 1)][(sym13__ - 1)]);}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
              vars__.push_back(p_3d_simplex[(sym16__ - 1)][(sym15__ - 1)][(sym14__ - 1)][(sym13__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          vars__.push_back(rvalue(p_cfcov_54, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          vars__.push_back(rvalue(p_cfcov_33, cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            vars__.push_back(rvalue(p_cfcov_33_ar, cons_list(index_uni(sym15__), cons_list(index_uni(sym14__), cons_list(index_uni(sym13__), nil_index_list()))), "pretty printed e"));
          }}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("p_real");
    names__.push_back("offset_multiplier");
    names__.push_back("p_real_1d_ar");
    names__.push_back("p_real_3d_ar");
    names__.push_back("p_vec");
    names__.push_back("p_1d_vec");
    names__.push_back("p_3d_vec");
    names__.push_back("p_row_vec");
    names__.push_back("p_1d_row_vec");
    names__.push_back("p_3d_row_vec");
    names__.push_back("p_ar_mat");
    names__.push_back("p_simplex");
    names__.push_back("p_1d_simplex");
    names__.push_back("p_3d_simplex");
    names__.push_back("p_cfcov_54");
    names__.push_back("p_cfcov_33");
    names__.push_back("p_cfcov_33_ar");
    names__.push_back("tp_real_1d_ar");
    names__.push_back("tp_real_3d_ar");
    names__.push_back("tp_vec");
    names__.push_back("tp_1d_vec");
    names__.push_back("tp_3d_vec");
    names__.push_back("tp_row_vec");
    names__.push_back("tp_1d_row_vec");
    names__.push_back("tp_3d_row_vec");
    names__.push_back("tp_ar_mat");
    names__.push_back("tp_simplex");
    names__.push_back("tp_1d_simplex");
    names__.push_back("tp_3d_simplex");
    names__.push_back("tp_cfcov_54");
    names__.push_back("tp_cfcov_33");
    names__.push_back("tp_cfcov_33_ar");
    names__.push_back("gq_r1");
    names__.push_back("gq_r2");
    names__.push_back("gq_real_1d_ar");
    names__.push_back("gq_real_3d_ar");
    names__.push_back("gq_vec");
    names__.push_back("gq_1d_vec");
    names__.push_back("gq_3d_vec");
    names__.push_back("gq_row_vec");
    names__.push_back("gq_1d_row_vec");
    names__.push_back("gq_3d_row_vec");
    names__.push_back("gq_ar_mat");
    names__.push_back("gq_simplex");
    names__.push_back("gq_1d_simplex");
    names__.push_back("gq_3d_simplex");
    names__.push_back("gq_cfcov_54");
    names__.push_back("gq_cfcov_33");
    names__.push_back("gq_cfcov_33_ar");
    names__.push_back("indices");
    names__.push_back("indexing_mat");
    names__.push_back("idx_res1");
    names__.push_back("idx_res2");
    names__.push_back("idx_res3");
    names__.push_back("idx_res11");
    names__.push_back("idx_res21");
    names__.push_back("idx_res31");
    names__.push_back("idx_res4");
    names__.push_back("idx_res5");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(3);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(3);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(3);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "p_real");
    for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
      {
        param_names__.push_back(std::string() + "offset_multiplier" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_real_1d_ar" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
              {
                param_names__.push_back(std::string() + "p_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_row_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_simplex" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_cfcov_54" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_cfcov_33" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
              {
                param_names__.push_back(std::string() + "p_cfcov_33_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
              }}
          }}
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_real_1d_ar" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "tp_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_row_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_simplex" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_cfcov_54" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_cfcov_33" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "tp_cfcov_33_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "gq_r1");
      param_names__.push_back(std::string() + "gq_r2");
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_real_1d_ar" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "gq_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_row_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_simplex" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_cfcov_54" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_cfcov_33" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "gq_cfcov_33_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          param_names__.push_back(std::string() + "indices" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "indexing_mat" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res1" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res2" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res3" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res11" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res21" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res31" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              param_names__.push_back(std::string() + "idx_res4" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 2; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
            {
              param_names__.push_back(std::string() + "idx_res5" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "p_real");
    for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
      {
        param_names__.push_back(std::string() + "offset_multiplier" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_real_1d_ar" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
              {
                param_names__.push_back(std::string() + "p_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_row_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_simplex" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 14; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_cfcov_54" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= 6; ++sym13__) {
      {
        param_names__.push_back(std::string() + "p_cfcov_33" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= 6; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            param_names__.push_back(std::string() + "p_cfcov_33_ar" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_real_1d_ar" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "tp_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_row_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_simplex" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 14; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_cfcov_54" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= 6; ++sym13__) {
        {
          param_names__.push_back(std::string() + "tp_cfcov_33" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= 6; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              param_names__.push_back(std::string() + "tp_cfcov_33_ar" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "gq_r1");
      param_names__.push_back(std::string() + "gq_r2");
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_real_1d_ar" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "gq_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_row_vec" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_simplex" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
                {
                  for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                    }}
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 14; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_cfcov_54" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= 6; ++sym13__) {
        {
          param_names__.push_back(std::string() + "gq_cfcov_33" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= 6; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
            {
              param_names__.push_back(std::string() + "gq_cfcov_33_ar" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          param_names__.push_back(std::string() + "indices" + '.' + std::to_string(sym13__));
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "indexing_mat" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res1" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res2" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res3" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res11" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res21" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
                {
                  param_names__.push_back(std::string() + "idx_res31" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                }}
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
            {
              param_names__.push_back(std::string() + "idx_res4" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
      for (size_t sym13__ = 1; sym13__ <= 2; ++sym13__) {
        {
          for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
            {
              param_names__.push_back(std::string() + "idx_res5" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"p_real\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_multiplier\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"p_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"p_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"p_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"p_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"p_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"p_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"p_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"parameters\"},{\"name\":\"p_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"p_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"p_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"p_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" << 5 << ",\"cols\":" << 4 << "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"parameters\"},{\"name\":\"tp_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" << 5 << ",\"cols\":" << 4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_r1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" << 5 << ",\"cols\":" << 4 << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"indices\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"indexing_mat\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res1\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res2\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res3\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res11\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res21\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res31\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res4\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res5\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"p_real\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_multiplier\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"p_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"p_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"p_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"p_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"p_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"p_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"p_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"parameters\"},{\"name\":\"p_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "},\"block\":\"parameters\"},{\"name\":\"p_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}},\"block\":\"parameters\"},{\"name\":\"p_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}}}},\"block\":\"parameters\"},{\"name\":\"p_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" << 14 << "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 6 << "}},\"block\":\"parameters\"},{\"name\":\"tp_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" << 14 << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 6 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_r1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" << 14 << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 6 << "}},\"block\":\"generated_quantities\"},{\"name\":\"indices\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"indexing_mat\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res1\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res2\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res3\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res11\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res21\",\"type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res31\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res4\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 4 << "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res5\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef mother_model_namespace::mother_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}


Warning: deprecated language construct used in 'mother.stan', line 60, column 21:
   -------------------------------------------------
    58:  
    59:    void unit_normal_lp(real u) {
    60:      increment_log_prob(normal_log(u,0,1));
                              ^
    61:      u ~ uniform(-100,100);
    62:    }
   -------------------------------------------------

increment_log_prob(...); is deprecated and will be removed in the future. Use target += ...; instead.


Warning: deprecated language construct used in 'mother.stan', line 184, column 20:
   -------------------------------------------------
   182:  
   183:    real foo_lp(real x) {
   184:      return x + get_lp();
                             ^
   185:    }
   186:  
   -------------------------------------------------

get_lp() function is deprecated. It will be removed in a future release. Use target() instead.

