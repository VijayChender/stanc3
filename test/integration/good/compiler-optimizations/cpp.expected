  $ ../../../../../install/default/bin/stanc --print-cpp optimizations.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>

template <typename T, typename S>
std::vector<T> resize_to_match(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}

namespace optimizations_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'optimizations.stan', line 20, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 21, column 4 to column 13)",
                                                      " (in 'optimizations.stan', line 22, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 23, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 24, column 4 to column 24)",
                                                      " (in 'optimizations.stan', line 27, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 28, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 29, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 30, column 17 to column 28)",
                                                      " (in 'optimizations.stan', line 30, column 4 to column 28)",
                                                      " (in 'optimizations.stan', line 32, column 6 to column 24)",
                                                      " (in 'optimizations.stan', line 33, column 6 to column 22)",
                                                      " (in 'optimizations.stan', line 31, column 33 to line 34, column 5)",
                                                      " (in 'optimizations.stan', line 31, column 4 to line 34, column 5)",
                                                      " (in 'optimizations.stan', line 36, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 35, column 21 to line 37, column 5)",
                                                      " (in 'optimizations.stan', line 35, column 4 to line 37, column 5)",
                                                      " (in 'optimizations.stan', line 41, column 16 to column 29)",
                                                      " (in 'optimizations.stan', line 40, column 12 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 39, column 8 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 38, column 4 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 44, column 10 to column 16)",
                                                      " (in 'optimizations.stan', line 43, column 8 to line 44, column 16)",
                                                      " (in 'optimizations.stan', line 45, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 42, column 21 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 42, column 4 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 49, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 48, column 8 to line 49, column 19)",
                                                      " (in 'optimizations.stan', line 50, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 47, column 21 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 47, column 4 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 54, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 53, column 8 to line 54, column 19)",
                                                      " (in 'optimizations.stan', line 55, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 52, column 21 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 52, column 4 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 57, column 4 to column 10)",
                                                      " (in 'optimizations.stan', line 58, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 60, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 59, column 4 to line 60, column 12)",
                                                      " (in 'optimizations.stan', line 61, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 62, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 63, column 4 to column 12)",
                                                      " (in 'optimizations.stan', line 64, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 65, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 66, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 68, column 6 to column 19)",
                                                      " (in 'optimizations.stan', line 67, column 4 to line 68, column 19)",
                                                      " (in 'optimizations.stan', line 69, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 70, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 71, column 4 to column 10)",
                                                      " (in 'optimizations.stan', line 72, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 74, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 73, column 4 to line 74, column 12)",
                                                      " (in 'optimizations.stan', line 75, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 77, column 6 to column 9)",
                                                      " (in 'optimizations.stan', line 76, column 4 to line 77, column 9)",
                                                      " (in 'optimizations.stan', line 78, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 80, column 8 to column 19)",
                                                      " (in 'optimizations.stan', line 81, column 8 to column 15)",
                                                      " (in 'optimizations.stan', line 82, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 79, column 4 to line 83, column 5)",
                                                      " (in 'optimizations.stan', line 85, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 86, column 8 to column 16)",
                                                      " (in 'optimizations.stan', line 87, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 84, column 4 to line 88, column 5)",
                                                      " (in 'optimizations.stan', line 89, column 11 to column 25)",
                                                      " (in 'optimizations.stan', line 89, column 4 to column 25)",
                                                      " (in 'optimizations.stan', line 90, column 11 to column 23)",
                                                      " (in 'optimizations.stan', line 90, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 91, column 25 to column 28)",
                                                      " (in 'optimizations.stan', line 91, column 16 to column 19)",
                                                      " (in 'optimizations.stan', line 91, column 4 to column 28)",
                                                      " (in 'optimizations.stan', line 92, column 23 to column 24)",
                                                      " (in 'optimizations.stan', line 92, column 16 to column 17)",
                                                      " (in 'optimizations.stan', line 92, column 4 to column 24)",
                                                      " (in 'optimizations.stan', line 93, column 16 to column 19)",
                                                      " (in 'optimizations.stan', line 93, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 94, column 16 to column 17)",
                                                      " (in 'optimizations.stan', line 94, column 4 to column 17)",
                                                      " (in 'optimizations.stan', line 95, column 26 to column 27)",
                                                      " (in 'optimizations.stan', line 95, column 19 to column 20)",
                                                      " (in 'optimizations.stan', line 95, column 4 to column 27)",
                                                      " (in 'optimizations.stan', line 96, column 16 to column 30)",
                                                      " (in 'optimizations.stan', line 96, column 14 to column 32)",
                                                      " (in 'optimizations.stan', line 96, column 4 to column 32)",
                                                      " (in 'optimizations.stan', line 97, column 20 to column 26)",
                                                      " (in 'optimizations.stan', line 97, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 98, column 22 to column 28)",
                                                      " (in 'optimizations.stan', line 98, column 4 to column 28)",
                                                      " (in 'optimizations.stan', line 100, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 99, column 4 to line 100, column 15)",
                                                      " (in 'optimizations.stan', line 102, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 101, column 4 to line 102, column 12)",
                                                      " (in 'optimizations.stan', line 104, column 6 to column 7)",
                                                      " (in 'optimizations.stan', line 103, column 4 to line 104, column 7)",
                                                      " (in 'optimizations.stan', line 106, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 105, column 4 to line 106, column 15)",
                                                      " (in 'optimizations.stan', line 108, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 107, column 4 to line 108, column 12)",
                                                      " (in 'optimizations.stan', line 110, column 6 to column 7)",
                                                      " (in 'optimizations.stan', line 109, column 4 to line 110, column 7)",
                                                      " (in 'optimizations.stan', line 112, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 113, column 8 to column 9)",
                                                      " (in 'optimizations.stan', line 114, column 8 to column 9)",
                                                      " (in 'optimizations.stan', line 115, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 111, column 4 to line 116, column 5)",
                                                      " (in 'optimizations.stan', line 119, column 12 to column 24)",
                                                      " (in 'optimizations.stan', line 120, column 12 to column 13)",
                                                      " (in 'optimizations.stan', line 118, column 8 to line 121, column 9)",
                                                      " (in 'optimizations.stan', line 122, column 8 to column 9)",
                                                      " (in 'optimizations.stan', line 124, column 12 to column 13)",
                                                      " (in 'optimizations.stan', line 123, column 8 to line 125, column 9)",
                                                      " (in 'optimizations.stan', line 126, column 8 to column 10)",
                                                      " (in 'optimizations.stan', line 117, column 4 to line 127, column 5)",
                                                      " (in 'optimizations.stan', line 128, column 4 to column 14)",
                                                      " (in 'optimizations.stan', line 132, column 6 to column 21)",
                                                      " (in 'optimizations.stan', line 130, column 6 to column 19)",
                                                      " (in 'optimizations.stan', line 129, column 4 to line 132, column 21)",
                                                      " (in 'optimizations.stan', line 133, column 4 to column 17)",
                                                      " (in 'optimizations.stan', line 134, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 136, column 8 to column 22)",
                                                      " (in 'optimizations.stan', line 137, column 8 to column 23)",
                                                      " (in 'optimizations.stan', line 138, column 8 to column 24)",
                                                      " (in 'optimizations.stan', line 135, column 21 to line 139, column 5)",
                                                      " (in 'optimizations.stan', line 135, column 4 to line 139, column 5)",
                                                      " (in 'optimizations.stan', line 140, column 4 to column 25)",
                                                      " (in 'optimizations.stan', line 142, column 6 to column 27)",
                                                      " (in 'optimizations.stan', line 141, column 4 to line 142, column 27)",
                                                      " (in 'optimizations.stan', line 143, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 144, column 4 to column 22)",
                                                      " (in 'optimizations.stan', line 146, column 6 to column 28)",
                                                      " (in 'optimizations.stan', line 145, column 4 to line 146, column 28)",
                                                      " (in 'optimizations.stan', line 147, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 4, column 10 to column 17)",
                                                      " (in 'optimizations.stan', line 3, column 8 to line 4, column 17)",
                                                      " (in 'optimizations.stan', line 5, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 2, column 33 to line 6, column 5)",
                                                      " (in 'optimizations.stan', line 10, column 12 to column 26)",
                                                      " (in 'optimizations.stan', line 9, column 8 to line 10, column 26)",
                                                      " (in 'optimizations.stan', line 11, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 8, column 20 to line 12, column 5)",
                                                      " (in 'optimizations.stan', line 15, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 16, column 8 to column 18)",
                                                      " (in 'optimizations.stan', line 14, column 18 to line 17, column 5)"};

template <typename T0__, typename T1__, typename T2__, typename T3__>
void
nrfun_lp(const T0__& x, const T1__& y, const T2__& lp__,
         const T3__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 137;
    if (logical_gt(x, 342)) {
      current_statement__ = 136;
      return ;
    } 
    current_statement__ = 138;
    lp_accum__.add(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF nrfun_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct nrfun_lp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
void
operator()(const T0__& x, const T1__& y, const T2__& lp__,
           const T3__& lp_accum__, std::ostream* pstream__)  const 
{
return nrfun_lp(x, y, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
T0__
rfun(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 141;
    if (logical_gt(y, 2)) {
      current_statement__ = 140;
      return (y + 24);
    } 
    current_statement__ = 142;
    return (y + 2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF rfun") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_functor__ {
template <typename T0__>
T0__
operator()(const T0__& y, std::ostream* pstream__)  const 
{
return rfun(y, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
rfun_lp(const T0__& lp__, const T1__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 144;
    lp_accum__.add(2);
    current_statement__ = 145;
    return 24;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF rfun_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_lp_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& lp__, const T1__& lp_accum__, std::ostream* pstream__)  const 
{
return rfun_lp(lp__, lp_accum__, pstream__);
}
};

class optimizations_model : public model_base_crtp<optimizations_model> {

 private:
  int pos__;
 
 public:
  ~optimizations_model() { }
  
  std::string model_name() const { return "optimizations_model"; }
  
  optimizations_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "optimizations_model_namespace::optimizations_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 1;
    num_params_r__ += 3 * 2;
    num_params_r__ += 2;
    num_params_r__ += (2 + ((2 * (2 - 1)) / 2));
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "optimizations_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ theta;
      
      current_statement__ = 2;
      theta = in__.scalar();
      local_scalar_t__ phi;
      
      current_statement__ = 3;
      phi = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 2);
      
      current_statement__ = 4;
      x_matrix = in__.matrix(3, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> x_vector;
      x_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      
      current_statement__ = 5;
      x_vector = in__.vector(2);
      Eigen::Matrix<local_scalar_t__, -1, -1> x_cov;
      x_cov = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_cov_in__;
      x_cov_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((2 + ((2 * (2 - 1)) / 2)));
      
      current_statement__ = 6;
      x_cov_in__ = in__.vector((2 + ((2 * (2 - 1)) / 2)));
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        x_cov = cov_matrix_constrain(x_cov_in__, 2, lp__);
      } else {
        current_statement__ = 6;
        x_cov = cov_matrix_constrain(x_cov_in__, 2);
      }
      {
        local_scalar_t__ x;
        
        current_statement__ = 8;
        nrfun_lp(4, 3);
        current_statement__ = 9;
        if (pstream__) {
          stan_print(pstream__, rfun(3, pstream__));
          stan_print(pstream__, "\n");
        }
        current_statement__ = 11;
        if (rfun(4, pstream__)) {
          current_statement__ = 10;
          if (pstream__) {
            stan_print(pstream__, "a");
            stan_print(pstream__, "\n");
          }
        } 
        current_statement__ = 15;
        for (size_t i = rfun(7, pstream__); i <= rfun(5, pstream__); ++i) {
          current_statement__ = 12;
          lp_accum__.add(rfun(8, pstream__));
          current_statement__ = 13;
          nrfun_lp(34, 3);}
        current_statement__ = 18;
        for (size_t i = 1; i <= 5; ++i) {
          current_statement__ = 16;
          lp_accum__.add(53);}
        current_statement__ = 22;
        for (size_t i = 1; i <= 5; ++i) {
          current_statement__ = 21;
          for (size_t j = i; j <= (i + 2); ++j) {
            current_statement__ = 20;
            for (size_t k = j; k <= (j * 2); ++k) {
              current_statement__ = 19;
              lp_accum__.add(53);}}}
        current_statement__ = 27;
        for (size_t i = 1; i <= 5; ++i) {
          current_statement__ = 24;
          if (logical_gt(i, 4)) {
            break;
          } 
          current_statement__ = 25;
          lp_accum__.add(2);}
        current_statement__ = 32;
        for (size_t i = 1; i <= 5; ++i) {
          current_statement__ = 29;
          if (logical_gt(i, 4)) {
            continue;
          } 
          current_statement__ = 30;
          lp_accum__.add(2);}
        current_statement__ = 37;
        for (size_t i = 1; i <= 5; ++i) {
          current_statement__ = 34;
          if (logical_gt(i, 4)) {
            continue;
          } 
          current_statement__ = 35;
          lp_accum__.add(2);}
        current_statement__ = 38;
        x = 3;
        current_statement__ = 39;
        lp_accum__.add(x);
        current_statement__ = 41;
        if (logical_gt(theta, 2)) {
          current_statement__ = 40;
          x = 2;
        } 
        current_statement__ = 42;
        lp_accum__.add(x);
        current_statement__ = 43;
        x = 24;
        current_statement__ = 44;
        x = 247;
        current_statement__ = 45;
        lp_accum__.add(x);
        current_statement__ = 46;
        x = (24 * 24);
        current_statement__ = 47;
        lp_accum__.add(x);
        current_statement__ = 49;
        if (logical_gt(theta, 46)) {
          current_statement__ = 48;
          x = (24 * 245);
        } 
        current_statement__ = 50;
        lp_accum__.add(x);
        local_scalar_t__ z;
        
        current_statement__ = 52;
        z = x;
        current_statement__ = 53;
        lp_accum__.add(z);
        current_statement__ = 55;
        if (logical_gt(theta, 46)) {
          current_statement__ = 54;
          z = x;
        } 
        current_statement__ = 56;
        lp_accum__.add(z);
        current_statement__ = 58;
        for (size_t i = 14; i <= 35; ++i) { }
        current_statement__ = 59;
        lp_accum__.add(2);
        {
          local_scalar_t__ y;
          
          current_statement__ = 60;
          y = 2;
          current_statement__ = 61;
          y = 24;
          current_statement__ = 62;
          lp_accum__.add(y);
        }
        {
          local_scalar_t__ y;
          
          current_statement__ = 64;
          y = 22;
          current_statement__ = 65;
          y = 245;
          current_statement__ = 66;
          lp_accum__.add(y);
        }
        current_statement__ = 69;
        if (0) {
          current_statement__ = 68;
          lp_accum__.add(235);
        } 
        current_statement__ = 71;
        if (1) {
          current_statement__ = 70;
          lp_accum__.add(2);
        } 
        current_statement__ = 74;
        if ((24 * 2)) {
          
        } else {
          
        }
        current_statement__ = 77;
        if ((24 * 2)) {
          
        } else {
          
        }
        current_statement__ = 79;
        if ((24 * 2)) {
          
        } 
        current_statement__ = 81;
        if ((20 * 2)) {
          
        } 
        current_statement__ = 84;
        if (rfun_lp(lp__, lp_accum__, pstream__)) {
          
        } else {
          
        }
        current_statement__ = 87;
        while (0) {
          current_statement__ = 85;
          lp_accum__.add(325);
        }
        current_statement__ = 89;
        while ((24 * 24)) {
          break;
        }
        current_statement__ = 91;
        while (rfun_lp(lp__, lp_accum__, pstream__)) {
          break;
        }
        current_statement__ = 93;
        for (size_t i = 31; i <= 225; ++i) { continue;}
        current_statement__ = 95;
        for (size_t i = 31; i <= 225; ++i) { break;}
        current_statement__ = 97;
        for (size_t i = 31; i <= 225; ++i) { }
        current_statement__ = 99;
        for (size_t i = rfun_lp(lp__, lp_accum__, pstream__); i <= 225; ++i) {
          continue;}
        current_statement__ = 101;
        for (size_t i = rfun_lp(lp__, lp_accum__, pstream__); i <= 225; ++i) {
          break;}
        current_statement__ = 103;
        for (size_t i = rfun_lp(lp__, lp_accum__, pstream__); i <= 225; ++i) {
          }
        {
          current_statement__ = 104;
          lp_accum__.add(1);
          
          
          current_statement__ = 107;
          lp_accum__.add(24);
        }
        {
          {
            current_statement__ = 109;
            lp_accum__.add(1);
            
          }
          
          {
            
          }
          {
            
          }
        }
        local_scalar_t__ temp;
        
        current_statement__ = 120;
        if (logical_gt(2, 3)) {
          current_statement__ = 119;
          temp = (2 * 2);
        } else {
          current_statement__ = 118;
          if (pstream__) {
            stan_print(pstream__, "hello");
            stan_print(pstream__, "\n");
          }
        }
        current_statement__ = 121;
        temp = (2 * 2);
        local_scalar_t__ temp2;
        
        current_statement__ = 127;
        for (size_t i = 2; i <= 3; ++i) {
          current_statement__ = 123;
          temp2 = (2 * 3);
          current_statement__ = 124;
          lp_accum__.add(temp);
          current_statement__ = 125;
          lp_accum__.add(temp2);}
        local_scalar_t__ dataonlyvar;
        
        current_statement__ = 128;
        dataonlyvar = 3;
        current_statement__ = 130;
        if (logical_gt(3, 4)) {
          current_statement__ = 129;
          dataonlyvar = (3 * 53);
        } 
        current_statement__ = 131;
        lp_accum__.add(dataonlyvar);
        local_scalar_t__ paramvar;
        
        current_statement__ = 132;
        paramvar = 3;
        current_statement__ = 134;
        if (logical_gt(42, 1)) {
          current_statement__ = 133;
          paramvar = (theta * 34);
        } 
        current_statement__ = 135;
        lp_accum__.add(paramvar);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "optimizations_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double theta;
      
      current_statement__ = 2;
      theta = in__.scalar();
      double phi;
      
      current_statement__ = 3;
      phi = in__.scalar();
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      
      current_statement__ = 4;
      x_matrix = in__.matrix(3, 2);
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      
      current_statement__ = 5;
      x_vector = in__.vector(2);
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_cov_in__;
      x_cov_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((2 + ((2 * (2 - 1)) / 2)));
      
      current_statement__ = 6;
      x_cov_in__ = in__.vector((2 + ((2 * (2 - 1)) / 2)));
      current_statement__ = 6;
      x_cov = cov_matrix_constrain(x_cov_in__, 2);
      vars__.push_back(theta);
      vars__.push_back(phi);
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(sym2__), cons_list(index_uni(sym1__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(x_vector[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.push_back(rvalue(x_cov, cons_list(index_uni(sym2__), cons_list(index_uni(sym1__), nil_index_list())), "pretty printed e"));
        }}
      if (logical_negation((primitive_value(emit_transformed_parameters__) || primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double theta;
      
      current_statement__ = 2;
      pos__ = 1;
      current_statement__ = 2;
      theta = context__.vals_r("theta")[(pos__ - 1)];
      double phi;
      
      current_statement__ = 3;
      pos__ = 1;
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(pos__ - 1)];
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        for (size_t sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(sym2__), cons_list(index_uni(sym1__), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}}
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      
      current_statement__ = 5;
      pos__ = 1;
      current_statement__ = 5;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 5;
        x_vector[(sym1__ - 1)] = context__.vals_r("x_vector")[(pos__ - 1)];
        current_statement__ = 5;
        pos__ = (pos__ + 1);}
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      
      current_statement__ = 6;
      pos__ = 1;
      current_statement__ = 6;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        for (size_t sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 6;
          assign(x_cov, cons_list(index_uni(sym2__), cons_list(index_uni(sym1__), nil_index_list())), context__.vals_r("x_cov")[(pos__ - 1)], "assigning variable x_cov");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}}
      current_statement__ = 6;
      x_cov = cov_matrix_free(x_cov);
      vars__.push_back(theta);
      vars__.push_back(phi);
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(sym2__), cons_list(index_uni(sym1__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(x_vector[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.push_back(rvalue(x_cov, cons_list(index_uni(sym2__), cons_list(index_uni(sym1__), nil_index_list())), "pretty printed e"));
        }}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("theta");
    names__.push_back("phi");
    names__.push_back("x_matrix");
    names__.push_back("x_vector");
    names__.push_back("x_cov");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (size_t sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= (2 + ((2 * (2 - 1)) / 2)); ++sym1__) {
      {
        param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"vector\",\"length\":" << (2 + ((2 * (2 - 1)) / 2)) << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef optimizations_model_namespace::optimizations_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

